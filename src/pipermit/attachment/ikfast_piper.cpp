/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004c generated on 2025-04-18 01:30:52.124776
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004c);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.975215106382874)*x4);
x13=((0.0201345589650366)*x4);
x14=((0.0104210465711364)*x3);
x15=((0.975215106382874)*x1);
x16=((0.221258889725677)*x4);
x17=((0.990780079856878)*x3);
x18=((0.0324706496423512)*x3);
x19=((8.60724852893525e-5)*x4);
x20=((0.0762102489057463)*x3);
x21=((8.60724852893525e-5)*x1);
x22=((0.221258889725677)*x1);
x23=((0.237461398380932)*x3);
x24=((0.091)*x6);
x25=((8.826e-5)*x6);
x26=(x0*x5);
x27=(x5*x7);
x28=(x10*x6);
x29=(x0*x3);
x30=(x0*x2);
x31=((-0.0887445746808415)*x1);
x32=((-0.975215106382874)*x1);
x33=((-0.975215106382874)*x4);
x34=(x2*x7);
x35=((-1.95283096071883e-5)*x4);
x36=((-0.221258889725677)*x4);
x37=((-0.221258889725677)*x1);
x38=((-1.0)*x10);
x39=((-0.0887445746808415)*x4);
x40=(x3*x7);
x41=(x11*x6);
x42=((-1.0)*x11);
x43=(x0*x17);
x44=((0.135480010919689)*x30);
x45=(x17*x7);
x46=((0.135480010919689)*x34);
x47=((((-0.135480010919689)*x2))+x17);
x48=((((0.135480010919689)*x3))+(((0.990780079856878)*x2)));
x49=((-1.0)*x48);
x50=(x4*x47);
x51=((-1.95283096071883e-5)*x47);
x52=((-0.221258889725677)*x47);
x53=(x1*x47);
x54=(x4*x49);
x55=(x1*x48);
x56=(x44+(((-1.0)*x43)));
x57=(x43+(((-1.0)*x44)));
x58=(x45+(((-1.0)*x46)));
x59=(x46+(((-1.0)*x45)));
x60=((((0.135480010919689)*x29))+(((0.990780079856878)*x30)));
x61=((((0.990780079856878)*x34))+(((0.135480010919689)*x40)));
x62=(x4*x57);
x63=(x1*x59);
x64=(x1*x61);
x65=(x1*x60);
x66=(((x12*x49))+((x16*x47))+((x15*x47))+((x22*x48)));
x67=(((x15*x48))+((x37*x47))+((x12*x47))+((x36*x49)));
x68=((-1.0)*x66);
x69=(x11*x67);
x70=(x5*x66);
x71=(((x12*x60))+((x36*x57))+((x15*x56))+((x37*x60)));
x72=(((x12*x57))+((x15*x60))+((x22*x56))+((x16*x60)));
x73=((-1.0)*x72);
x74=(((x37*x61))+((x12*x61))+((x15*x59))+((x36*x58)));
x75=(((x15*x61))+((x16*x61))+((x22*x59))+((x12*x58)));
x76=((-1.0)*x75);
x77=(x11*x71);
x78=(x6*x73);
x79=(x11*x74);
x80=(x6*x76);
x81=((((-1.0)*x6*x7))+((x5*x72)));
x82=(((x5*x75))+((x0*x6)));
x83=(((x6*((((x32*x61))+((x37*x59))+((x33*x58))+((x36*x61))))))+x26);
x84=((((-1.0)*x27))+((x6*((((x37*x56))+((x36*x60))+((x33*x57))+((x32*x60)))))));
x85=(x10*x83);
eerot[0]=(((x8*((x77+((x10*x84))))))+((x81*x9)));
eerot[1]=(((x8*x81))+((x9*((((x42*x71))+((x38*x84)))))));
eerot[2]=(((x10*((((x22*x60))+((x33*x60))+((x32*x56))+((x16*x57))))))+((x11*((x78+(((-1.0)*x27)))))));
eetrans[0]=(((x10*(((((-8.826e-5)*x27))+((x25*x73))))))+((x11*((((x24*x73))+(((-0.091)*x27))))))+((x10*(((((0.0201345589650366)*x65))+((x13*x57))+((x39*x60))+((x31*x56))))))+((x11*((((x19*x60))+((x35*x57))+(((-1.95283096071883e-5)*x65))+((x21*x56))))))+(((0.03861452)*x30))+((x1*(((((0.0762102489057463)*x30))+((x0*x14))))))+((x4*(((((-0.0104210465711364)*x30))+((x0*x20))))))+(((-0.28240223039926)*x29))+((x1*((((x0*x23))+(((-0.0324706496423512)*x30))))))+((x4*(((((-0.237461398380932)*x30))+(((-1.0)*x0*x18)))))));
eerot[3]=(((x8*((x85+x79))))+((x82*x9)));
eerot[4]=(((x9*((((x42*x74))+((x38*x83))))))+((x8*x82)));
eerot[5]=(((x10*((((x32*x59))+((x33*x61))+((x16*x58))+((x22*x61))))))+((x11*((x26+x80)))));
eetrans[1]=(((x4*((((x20*x7))+(((-0.0104210465711364)*x34))))))+((x4*(((((-1.0)*x18*x7))+(((-0.237461398380932)*x34))))))+((x1*((((x14*x7))+(((0.0762102489057463)*x34))))))+((x11*(((((-1.95283096071883e-5)*x64))+((x19*x61))+((x35*x58))+((x21*x59))))))+((x10*((((x25*x76))+(((8.826e-5)*x26))))))+((x1*(((((-0.0324706496423512)*x34))+((x23*x7))))))+((x11*(((((0.091)*x26))+((x24*x76))))))+(((-0.28240223039926)*x40))+((x10*(((((0.0201345589650366)*x64))+((x39*x61))+((x31*x59))+((x13*x58))))))+(((0.03861452)*x34)));
eerot[6]=(((x8*((((x28*((((x36*x47))+((x32*x47))+((x33*x49))+((x37*x48))))))+x69))))+((x70*x9)));
eerot[7]=(((x9*(((((-1.0)*x28*x68))+(((-1.0)*x69))))))+((x70*x8)));
eerot[8]=(((x10*((((x16*x49))+((x32*x48))+((x22*x47))+((x33*x47))))))+((x41*x68)));
eetrans[2]=((0.123)+(((0.28240223039926)*x2))+(((0.03861452)*x3))+((x4*(((((-1.0)*x23))+(((0.0324706496423512)*x2))))))+((x41*((((x39*x49))+((x31*x47))+(((-0.0201345589650366)*x50))+(((-0.0201345589650366)*x55))))))+((x1*((x20+(((-0.0104210465711364)*x2))))))+((x10*(((((-0.0887445746808415)*x50))+((x13*x49))+(((-0.0887445746808415)*x55))+(((0.0201345589650366)*x53))))))+((x1*(((((-0.237461398380932)*x2))+(((-1.0)*x18))))))+((x28*(((((-1.95283096071883e-5)*x55))+(((-8.60724852893525e-5)*x54))+((x35*x47))+(((-8.60724852893525e-5)*x53))))))+((x4*(((((-0.0762102489057463)*x2))+(((-1.0)*x14))))))+((x11*((((x21*x48))+((x1*x51))+((x19*x47))+((x35*x49)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,tj0,j0mul,j1,cj1,sj1,htj1,tj1,j1mul,j2,cj2,sj2,htj2,tj2,j2mul,j3,cj3,sj3,htj3,tj3,j3mul,j4,cj4,sj4,htj4,tj4,j4mul,j5,cj5,sj5,htj5,tj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.091)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.091)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.123)+pz+(((-0.091)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x86=((1.0)*py);
IkReal x87=((1.0)*px);
IkReal x88=((1.0)*pz);
pp=((pz*pz)+(px*px)+(py*py));
npx=(((pz*r20))+((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01))+((pz*r21)));
npz=(((pz*r22))+((py*r12))+((px*r02)));
rxp0_0=((((-1.0)*r20*x86))+((pz*r10)));
rxp0_1=((((-1.0)*r00*x88))+((px*r20)));
rxp0_2=((((-1.0)*r10*x87))+((py*r00)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x86)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x88)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x87)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x86)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x88)));
rxp2_2=((((-1.0)*r12*x87))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x89=((((-8.826e-5)*r21))+rxp2_2);
IkReal x90=((8.826e-5)*r21);
IkReal x91=((0.0876714856100435)*rxp2_1);
IkReal x92=((1.99401768195153)*pp);
IkReal x93=((0.000351984001218085)*npx);
IkReal x94=((7.73788531994243e-6)*r11);
IkReal x95=((1.0)*npz);
IkReal x96=((0.0876714856100435)*rxp2_0);
IkReal x97=((7.73788531994243e-6)*r01);
IkReal x98=((1.54757706398849e-5)*r00);
IkReal x99=((1.54757706398849e-5)*r10);
IkReal x100=((0.00070396800243617)*npy);
IkReal x101=((4.0)*rxp1_2);
IkReal x102=((2.0)*rxp0_2);
IkReal x103=((0.175342971220087)*rxp0_1);
IkReal x104=((2.0)*npx);
IkReal x105=((0.175342971220087)*rxp0_0);
IkReal x106=((4.0)*npy);
IkReal x107=((0.350685942440174)*rxp1_1);
IkReal x108=((0.00017652)*r20);
IkReal x109=((1.0)*rxp2_2);
IkReal x110=((-0.00017652)*r20);
IkReal x111=(rxp2_2+x90);
IkReal x112=((((-1.0)*x96))+x97);
IkReal x113=((-2.0)*rxp0_2);
IkReal x114=((-0.350685942440174)*rxp1_0);
IkReal x115=((-0.175342971220087)*rxp0_0);
IkReal x116=(x90+(((-1.0)*x109)));
IkReal x117=((((-1.0)*x97))+x96);
IkReal x118=((-1.54757706398849e-5)*r00);
IkReal x119=(x100+(((-1.0)*x99)));
IkReal x120=((-0.00017652)+x104);
IkReal x121=((-0.0356594848869196)+x92);
IkReal x122=((((-1.0)*x96))+(((-1.0)*x97)));
IkReal x123=((((-1.0)*x90))+(((-1.0)*x109)));
IkReal x124=(x100+x99);
IkReal x125=(x97+x96);
IkReal x126=(x91+x94);
IkReal x127=(x93+x94);
IkReal x128=(x93+x91);
IkReal x129=(x91+x121);
IkReal x130=(x93+x121+npz);
op[0]=x89;
op[1]=x89;
op[2]=x110;
op[3]=x110;
op[4]=x111;
op[5]=x111;
op[6]=(x129+(((-1.0)*x95))+(((-1.0)*x127)));
op[7]=x112;
op[8]=x119;
op[9]=x98;
op[10]=(x93+x126+x121+(((-1.0)*x95)));
op[11]=x122;
op[12]=x112;
op[13]=(x94+x121+(((-1.0)*x128))+(((-1.0)*x95)));
op[14]=x98;
op[15]=x124;
op[16]=x122;
op[17]=(x93+(((-1.0)*x126))+x121+(((-1.0)*x95)));
op[18]=0;
op[19]=x89;
op[20]=0;
op[21]=x110;
op[22]=0;
op[23]=x111;
op[24]=x113;
op[25]=x113;
op[26]=x101;
op[27]=x101;
op[28]=x102;
op[29]=x102;
op[30]=((((-1.0)*x103))+x120);
op[31]=x105;
op[32]=(x107+(((-1.0)*x106)));
op[33]=x114;
op[34]=((-0.00017652)+x103+(((-1.0)*x104)));
op[35]=x115;
op[36]=x105;
op[37]=(x120+x103);
op[38]=x114;
op[39]=((((-1.0)*x107))+(((-1.0)*x106)));
op[40]=x115;
op[41]=((-0.00017652)+(((-1.0)*x103))+(((-1.0)*x104)));
op[42]=0;
op[43]=x113;
op[44]=0;
op[45]=x101;
op[46]=0;
op[47]=x102;
op[48]=x116;
op[49]=x116;
op[50]=x108;
op[51]=x108;
op[52]=x123;
op[53]=x123;
op[54]=(x94+x121+(((-1.0)*x128))+npz);
op[55]=x117;
op[56]=x124;
op[57]=x118;
op[58]=((((-1.0)*x126))+x130);
op[59]=x125;
op[60]=x117;
op[61]=(x129+(((-1.0)*x127))+npz);
op[62]=x118;
op[63]=x119;
op[64]=x125;
op[65]=(x126+x130);
op[66]=0;
op[67]=x116;
op[68]=0;
op[69]=x108;
op[70]=0;
op[71]=x123;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x131=htj4*htj4;
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((1.0)+x131),-1);
if(!x132.valid){
continue;
}
cj4array[numsolutions]=((x132.value)*(((1.0)+(((-1.0)*x131)))));
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x133.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x133.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x134=htj5*htj5;
CheckValue<IkReal> x135=IKPowWithIntegerCheck(((1.0)+x134),-1);
if(!x135.valid){
continue;
}
cj5array[numsolutions]=((x135.value)*(((1.0)+(((-1.0)*x134)))));
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x136.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x136.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x137=htj0*htj0;
CheckValue<IkReal> x138=IKPowWithIntegerCheck(((1.0)+x137),-1);
if(!x138.valid){
continue;
}
cj0array[numsolutions]=((x138.value)*(((1.0)+(((-1.0)*x137)))));
CheckValue<IkReal> x139=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x139.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x139.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}

// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x140=((1.0)*cj4);
IkReal x141=(cj0*cj5);
IkReal x142=(cj0*sj5);
IkReal x143=((((-1.0)*r02*x140))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)));
j3eval[0]=x143;
j3eval[1]=IKsign(x143);
j3eval[2]=((IKabs(((((-1.0)*r21*x141))+(((-1.0)*r20*x142)))))+(IKabs(((((-1.0)*r21*x140*x142))+((cj0*r22*sj4))+((cj4*r20*x141))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x144=((1.0)*sj0);
IkReal x145=(((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)));
j3eval[0]=x145;
j3eval[1]=((IKabs((((r22*sj0*sj4))+((cj4*cj5*r20*sj0))+(((-1.0)*cj4*r21*sj5*x144)))))+(IKabs(((((-1.0)*cj5*r21*x144))+(((-1.0)*r20*sj5*x144))))));
j3eval[2]=IKsign(x145);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x146=((((-1.0)*cj5*r20*sj4))+((r21*sj4*sj5))+((cj4*r22)));
j3eval[0]=x146;
j3eval[1]=IKsign(x146);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x147=((1.0)*r01);
IkReal x148=((((-1.0)*cj5*r20*sj4))+((r21*sj4*sj5))+((cj4*r22)));
j3eval[0]=x148;
j3eval[1]=IKsign(x148);
j3eval[2]=((IKabs((((cj4*cj5*r00))+((r02*sj4))+(((-1.0)*cj4*sj5*x147)))))+(IKabs(((((-1.0)*cj5*x147))+(((-1.0)*r00*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x149=((1.0)*cj4);
IkReal x150=((1.0)*sj5);
IkReal x151=((((-1.0)*r02*x149))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x150)));
j3eval[0]=x151;
j3eval[1]=IKsign(x151);
j3eval[2]=((IKabs(((((-1.0)*r20*x150))+(((-1.0)*cj5*r21)))))+(IKabs((((cj4*cj5*r20))+((r22*sj4))+(((-1.0)*r21*sj5*x149))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x152=cj4*cj4;
IkReal x153=cj5*cj5;
IkReal x154=r11*r11;
IkReal x155=r12*r12;
IkReal x156=r10*r10;
IkReal x157=(r11*sj5);
IkReal x158=(r12*sj4);
IkReal x159=((1.0)*r10);
IkReal x160=((1.0)*x152);
IkReal x161=((2.0)*cj5*r10);
IkReal x162=(x153*x156);
IkReal x163=(x153*x154);
IkReal x164=(((x152*x157*x161))+((x152*x155))+(((2.0)*cj4*x157*x158))+((x152*x163))+x162+(((-1.0)*x157*x161))+(((-1.0)*x155))+(((-1.0)*x163))+(((-1.0)*cj4*x158*x161))+(((-1.0)*x156))+(((-1.0)*x160*x162))+(((-1.0)*x154*x160)));
j3eval[0]=x164;
j3eval[1]=((IKabs(((((-1.0)*x158))+((cj4*x157))+(((-1.0)*cj4*cj5*x159)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x159))))));
j3eval[2]=IKsign(x164);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x165=cj4*cj4;
IkReal x166=cj5*cj5;
IkReal x167=r11*r11;
IkReal x168=r12*r12;
IkReal x169=r10*r10;
IkReal x170=(r11*sj5);
IkReal x171=(r12*sj4);
IkReal x172=((1.0)*r10);
IkReal x173=((1.0)*x165);
IkReal x174=((2.0)*cj5*r10);
IkReal x175=(x166*x169);
IkReal x176=(x166*x167);
CheckValue<IkReal> x177 = IKatan2WithCheck(IkReal(((((-1.0)*x171))+((cj4*x170))+(((-1.0)*cj4*cj5*x172)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x177.valid){
continue;
}
CheckValue<IkReal> x178=IKPowWithIntegerCheck(IKsign((((x165*x170*x174))+(((-1.0)*x176))+x175+(((-1.0)*cj4*x171*x174))+(((-1.0)*x168))+(((-1.0)*x169))+(((-1.0)*x170*x174))+(((2.0)*cj4*x170*x171))+((x165*x176))+((x165*x168))+(((-1.0)*x167*x173))+(((-1.0)*x173*x175)))),-1);
if(!x178.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x177.value)+(((1.5707963267949)*(x178.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x179=IKsin(j3);
IkReal x180=IKcos(j3);
IkReal x181=(cj4*cj5);
IkReal x182=(cj5*r11);
IkReal x183=(r12*sj4);
IkReal x184=((1.0)*x179);
IkReal x185=((1.0)*x180);
IkReal x186=(r10*x185);
IkReal x187=(cj4*sj5*x179);
evalcond[0]=((((-1.0)*x183*x185))+(((-1.0)*x181*x186))+((x179*x182))+((cj4*r11*sj5*x180))+((r10*sj5*x179)));
evalcond[1]=((((-1.0)*cj5*r21*x185))+((r21*x187))+(((-1.0)*r20*sj5*x185))+(((-1.0)*r22*sj4*x184))+(((-1.0)*r20*x181*x184)));
evalcond[2]=(((r01*x187))+(((-1.0)*cj5*r01*x185))+(((-1.0)*r00*sj5*x185))+(((-1.0)*r02*sj4*x184))+(((-1.0)*r00*x181*x184)));
evalcond[3]=((1.0)+(((-1.0)*x182*x185))+((r11*x187))+(((-1.0)*x183*x184))+(((-1.0)*sj5*x186))+(((-1.0)*r10*x181*x184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x188=((0.263803535154934)*cj4);
IkReal x189=((0.00035304)*sj5);
IkReal x190=((0.0879345117183112)*sj4);
IkReal x191=(r01*sj5);
IkReal x192=(cj5*r20);
IkReal x193=(cj5*r00);
IkReal x194=((1.00300013289883)*sj4);
IkReal x195=(r21*sj5);
IkReal x196=((3.00900039869648)*sj4);
IkReal x197=((0.263803535154934)*sj4);
IkReal x198=((1.00300013289883)*cj4);
IkReal x199=(cj4*r22);
IkReal x200=(cj4*r02);
IkReal x201=((3.00900039869648)*x199);
IkReal x202=(r02*x188);
IkReal x203=((0.00105912)*x192);
IkReal x204=((0.00105912)*x193);
IkReal x205=((3.00900039869648)*x200);
IkReal x206=(sj4*x193);
IkReal x207=(x191*x197);
IkReal x208=(x195*x196);
IkReal x209=(x191*x196);
IkReal x210=(x192*x197);
IkReal x211=(((x193*x197))+((x192*x196))+(((12.0)*pz))+(((0.00105912)*x195)));
IkReal x212=(x205+x210+x204+x209);
IkReal x213=((((0.00105912)*x191))+((r22*x188))+((x195*x197))+(((12.0)*px))+((x193*x196)));
IkReal x214=(x202+x201+x207+x208+x203);
j1eval[0]=((10.2725360127763)+(IKabs(((-0.15445808)+((x194*x195))+((x190*x191))+(((0.0879345117183112)*x200))+((r22*x198))+(((0.00035304)*x192))+(((-4.0)*pz))+(((-1.0)*x192*x194))+(((-1.0)*x190*x193))+(((-1.0)*r21*x189)))))+(IKabs(((1.12960892159704)+x212+(((-1.0)*x213)))))+(IKabs(((-1.12960892159704)+x212+(((-1.0)*x213)))))+(IKabs(((0.15445808)+(((-1.0)*x211))+x214)))+(IKabs(((-0.15445808)+(((-1.0)*x211))+x214)))+(IKabs(((1.12960892159704)+(((-1.0)*x190*x195))+((x190*x192))+(((-1.0)*r01*x189))+((x191*x194))+(((-1.0)*x193*x194))+((r02*x198))+(((0.00035304)*x193))+(((-4.0)*px))+(((-0.0879345117183112)*x199))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x215=(cj4*r02);
IkReal x216=(r21*sj5);
IkReal x217=((1.00300013289883)*sj4);
IkReal x218=((3.00900039869648)*sj4);
IkReal x219=(cj5*r20);
IkReal x220=(cj4*r22);
IkReal x221=((3.00900039869648)*x220);
IkReal x222=((0.263803535154934)*x215);
IkReal x223=((0.00105912)*x219);
IkReal x224=((1.00300013289883)*x220);
IkReal x225=((0.0879345117183112)*x215);
IkReal x226=((0.00035304)*x219);
IkReal x227=(cj5*r00*sj4);
IkReal x228=(r01*sj4*sj5);
IkReal x229=((0.263803535154934)*x228);
IkReal x230=(x216*x218);
IkReal x231=((0.0879345117183112)*x228);
IkReal x232=(x216*x217);
IkReal x233=((((0.263803535154934)*x227))+(((0.00105912)*x216))+((x218*x219))+(((12.0)*pz)));
IkReal x234=(((x217*x219))+(((0.00035304)*x216))+(((0.0879345117183112)*x227))+(((4.0)*pz)));
IkReal x235=(x223+x221+x222+x230+x229);
IkReal x236=(x226+x232+x224+x231+x225);
op[0]=((-0.15445808)+x236+(((-1.0)*x234)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+(((-1.0)*x233))+x235);
op[3]=4.51843568638817;
op[4]=((0.15445808)+(((-1.0)*x233))+x235);
op[5]=2.25921784319408;
op[6]=((0.15445808)+x236+(((-1.0)*x234)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x237=(cj4*r22);
IkReal x238=(cj5*sj4);
IkReal x239=(r01*sj5);
IkReal x240=(cj5*r00);
IkReal x241=(cj4*r02);
IkReal x242=((1.00300013289883)*x241);
IkReal x243=((0.00035304)*x240);
IkReal x244=((0.00105912)*x240);
IkReal x245=((3.00900039869648)*x241);
IkReal x246=(r21*sj4*sj5);
IkReal x247=((0.0879345117183112)*r20*x238);
IkReal x248=((3.00900039869648)*sj4*x239);
IkReal x249=((0.263803535154934)*r20*x238);
IkReal x250=((1.00300013289883)*sj4*x239);
IkReal x251=(x242+x247+x250+x243);
IkReal x252=(x249+x245+x244+x248);
IkReal x253=((((0.263803535154934)*x246))+(((0.263803535154934)*x237))+(((12.0)*px))+(((0.00105912)*x239))+(((3.00900039869648)*r00*x238)));
IkReal x254=((((4.0)*px))+(((1.00300013289883)*r00*x238))+(((0.0879345117183112)*x246))+(((0.00035304)*x239))+(((0.0879345117183112)*x237)));
j1evalpoly[0]=((-1.12960892159704)+(((0.30891616)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.12960892159704)+x251+(((-1.0)*x254))))))+(((htj1*htj1*htj1*htj1)*(((1.12960892159704)+(((-1.0)*x253))+x252))))+(((0.61783232)*(htj1*htj1*htj1)))+x251+(((-1.0)*x254))+(((0.30891616)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.12960892159704)+(((-1.0)*x253))+x252)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x255=((0.0870967471696526)*cj4);
IkReal x256=(r02*sj1);
IkReal x257=(cj1*r22);
IkReal x258=((0.996199857775771)*cj4);
IkReal x259=((0.996199857775771)*sj1);
IkReal x260=(cj1*r02);
IkReal x261=((0.0870967471696526)*cj1);
IkReal x262=((0.996199857775771)*cj1);
IkReal x263=((0.0870967471696526)*sj1);
IkReal x264=(r22*sj1);
IkReal x265=(r21*sj4*sj5);
IkReal x266=(cj5*r00*sj4);
IkReal x267=(r01*sj4*sj5);
IkReal x268=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x259*x267))+(((-1.0)*x256*x258))+(((-1.0)*x263*x265))+(((-1.0)*x255*x264))+(((-1.0)*x261*x266))+((x263*x268))+((x255*x260))+(((-1.0)*x262*x265))+((x262*x268))+(((-1.0)*x257*x258))+((x261*x267))+((x259*x266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x262*x266))+((x255*x256))+((x261*x265))+((x258*x260))+((x259*x268))+((x262*x267))+((x255*x257))+(((-1.0)*x261*x268))+(((-1.0)*x258*x264))+(((-1.0)*x259*x265))+((x263*x267))+(((-1.0)*x263*x266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x259*x267))+(((-1.0)*x256*x258))+(((-1.0)*x263*x265))+(((-1.0)*x255*x264))+(((-1.0)*x261*x266))+((x263*x268))+((x255*x260))+(((-1.0)*x262*x265))+((x262*x268))+(((-1.0)*x257*x258))+((x261*x267))+((x259*x266))))+IKsqr(((((-1.0)*x262*x266))+((x255*x256))+((x261*x265))+((x258*x260))+((x259*x268))+((x262*x267))+((x255*x257))+(((-1.0)*x261*x268))+(((-1.0)*x258*x264))+(((-1.0)*x259*x265))+((x263*x267))+(((-1.0)*x263*x266))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x259*x267))+(((-1.0)*x256*x258))+(((-1.0)*x263*x265))+(((-1.0)*x255*x264))+(((-1.0)*x261*x266))+((x263*x268))+((x255*x260))+(((-1.0)*x262*x265))+((x262*x268))+(((-1.0)*x257*x258))+((x261*x267))+((x259*x266))), ((((-1.0)*x262*x266))+((x255*x256))+((x261*x265))+((x258*x260))+((x259*x268))+((x262*x267))+((x255*x257))+(((-1.0)*x261*x268))+(((-1.0)*x258*x264))+(((-1.0)*x259*x265))+((x263*x267))+(((-1.0)*x263*x266))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x269=IKsin(j2);
IkReal x270=IKcos(j2);
IkReal x271=(cj5*sj3);
IkReal x272=(sj3*sj5);
IkReal x273=(r21*sj5);
IkReal x274=(cj3*cj4);
IkReal x275=((8.826e-5)*cj5);
IkReal x276=(cj5*r20);
IkReal x277=(r01*sj5);
IkReal x278=((1.0)*sj4);
IkReal x279=((1.0)*cj4);
IkReal x280=(cj5*r00);
IkReal x281=(cj1*x270);
IkReal x282=((0.247882444952069)*x269);
IkReal x283=(cj1*x269);
IkReal x284=(sj1*x270);
IkReal x285=(cj3*x278);
IkReal x286=(sj1*x269);
IkReal x287=((0.996199857775771)*x286);
IkReal x288=((0.996199857775771)*x281);
IkReal x289=((0.0870967471696526)*x283);
IkReal x290=((0.0870967471696526)*x284);
IkReal x291=((0.0870967471696526)*x281);
IkReal x292=((0.996199857775771)*x283);
IkReal x293=((0.0870967471696526)*x286);
IkReal x294=((0.996199857775771)*x284);
IkReal x295=(x292+x293+x294);
IkReal x296=(x289+x288+x290);
evalcond[0]=((((-1.0)*x273*x278))+(((-1.0)*x295))+x291+(((-1.0)*r22*x279))+((sj4*x276)));
evalcond[1]=(((sj4*x280))+x296+(((-1.0)*x277*x278))+(((-1.0)*x287))+(((-1.0)*r02*x279)));
evalcond[2]=((((0.0437395992633951)*x281))+((r20*x275))+(((0.28240223039926)*sj1))+(((-0.0437395992633951)*x286))+(((0.03861452)*cj1))+(((-0.247882444952069)*x284))+(((-8.826e-5)*x273))+(((-1.0)*cj1*x282))+(((-1.0)*pz)));
evalcond[3]=((((-0.28240223039926)*cj1))+(((-1.0)*px))+(((-1.0)*sj1*x282))+(((0.0437395992633951)*x283))+((r00*x275))+(((-8.826e-5)*x277))+(((0.0437395992633951)*x284))+(((0.247882444952069)*x281))+(((0.03861452)*sj1)));
evalcond[4]=((((-1.0)*r22*x285))+(((-1.0)*x274*x276))+(((-1.0)*x296))+((r21*x271))+x287+((r20*x272))+((x273*x274)));
evalcond[5]=((((-1.0)*x274*x280))+((x274*x277))+(((-1.0)*x295))+(((-1.0)*r02*x285))+x291+((r01*x271))+((r00*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x297=((1.0)*cj4);
IkReal x298=((1.0)*sj5);
CheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x298))+(((-1.0)*cj5*r21)))),IkReal(((((-1.0)*r21*sj5*x297))+((cj4*cj5*r20))+((r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x299.valid){
continue;
}
CheckValue<IkReal> x300=IKPowWithIntegerCheck(IKsign((((cj5*r00*sj4))+(((-1.0)*r02*x297))+(((-1.0)*r01*sj4*x298)))),-1);
if(!x300.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x299.value)+(((1.5707963267949)*(x300.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x301=IKsin(j3);
IkReal x302=IKcos(j3);
IkReal x303=(cj4*cj5);
IkReal x304=(cj5*r11);
IkReal x305=(r12*sj4);
IkReal x306=((1.0)*x301);
IkReal x307=((1.0)*x302);
IkReal x308=(r10*x307);
IkReal x309=(cj4*sj5*x301);
evalcond[0]=(((x301*x304))+(((-1.0)*x305*x307))+(((-1.0)*x303*x308))+((cj4*r11*sj5*x302))+((r10*sj5*x301)));
evalcond[1]=((((-1.0)*r20*x303*x306))+(((-1.0)*r22*sj4*x306))+((r21*x309))+(((-1.0)*cj5*r21*x307))+(((-1.0)*r20*sj5*x307)));
evalcond[2]=(((r01*x309))+(((-1.0)*r00*x303*x306))+(((-1.0)*r02*sj4*x306))+(((-1.0)*cj5*r01*x307))+(((-1.0)*r00*sj5*x307)));
evalcond[3]=((1.0)+(((-1.0)*sj5*x308))+((r11*x309))+(((-1.0)*x304*x307))+(((-1.0)*r10*x303*x306))+(((-1.0)*x305*x306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x310=((0.263803535154934)*cj4);
IkReal x311=((0.00035304)*sj5);
IkReal x312=((0.0879345117183112)*sj4);
IkReal x313=(r01*sj5);
IkReal x314=(cj5*r20);
IkReal x315=(cj5*r00);
IkReal x316=((1.00300013289883)*sj4);
IkReal x317=(r21*sj5);
IkReal x318=((3.00900039869648)*sj4);
IkReal x319=((0.263803535154934)*sj4);
IkReal x320=((1.00300013289883)*cj4);
IkReal x321=(cj4*r22);
IkReal x322=(cj4*r02);
IkReal x323=((3.00900039869648)*x321);
IkReal x324=(r02*x310);
IkReal x325=((0.00105912)*x314);
IkReal x326=((0.00105912)*x315);
IkReal x327=((3.00900039869648)*x322);
IkReal x328=(sj4*x315);
IkReal x329=(x313*x319);
IkReal x330=(x317*x318);
IkReal x331=(x313*x318);
IkReal x332=(x314*x319);
IkReal x333=(((x314*x318))+(((0.00105912)*x317))+((x315*x319))+(((12.0)*pz)));
IkReal x334=(x326+x332+x327+x331);
IkReal x335=(((x317*x319))+(((0.00105912)*x313))+((x315*x318))+(((12.0)*px))+((r22*x310)));
IkReal x336=(x325+x323+x330+x329+x324);
j1eval[0]=((10.2725360127763)+(IKabs(((1.12960892159704)+x334+(((-1.0)*x335)))))+(IKabs(((-0.15445808)+x336+(((-1.0)*x333)))))+(IKabs(((-1.12960892159704)+x334+(((-1.0)*x335)))))+(IKabs(((1.12960892159704)+((x312*x314))+(((0.00035304)*x315))+((r02*x320))+(((-0.0879345117183112)*x321))+(((-1.0)*x315*x316))+(((-1.0)*x312*x317))+((x313*x316))+(((-1.0)*r01*x311))+(((-4.0)*px)))))+(IKabs(((-0.15445808)+(((-1.0)*x312*x315))+(((0.0879345117183112)*x322))+((x316*x317))+(((-4.0)*pz))+((x312*x313))+(((0.00035304)*x314))+((r22*x320))+(((-1.0)*x314*x316))+(((-1.0)*r21*x311)))))+(IKabs(((0.15445808)+x336+(((-1.0)*x333))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x337=(cj4*r02);
IkReal x338=(r21*sj5);
IkReal x339=((1.00300013289883)*sj4);
IkReal x340=((3.00900039869648)*sj4);
IkReal x341=(cj5*r20);
IkReal x342=(cj4*r22);
IkReal x343=((3.00900039869648)*x342);
IkReal x344=((0.263803535154934)*x337);
IkReal x345=((0.00105912)*x341);
IkReal x346=((1.00300013289883)*x342);
IkReal x347=((0.0879345117183112)*x337);
IkReal x348=((0.00035304)*x341);
IkReal x349=(cj5*r00*sj4);
IkReal x350=(r01*sj4*sj5);
IkReal x351=((0.263803535154934)*x350);
IkReal x352=(x338*x340);
IkReal x353=((0.0879345117183112)*x350);
IkReal x354=(x338*x339);
IkReal x355=((((0.263803535154934)*x349))+(((12.0)*pz))+((x340*x341))+(((0.00105912)*x338)));
IkReal x356=((((0.00035304)*x338))+((x339*x341))+(((0.0879345117183112)*x349))+(((4.0)*pz)));
IkReal x357=(x345+x344+x352+x343+x351);
IkReal x358=(x354+x346+x353+x348+x347);
op[0]=((-0.15445808)+(((-1.0)*x356))+x358);
op[1]=2.25921784319408;
op[2]=((-0.15445808)+(((-1.0)*x355))+x357);
op[3]=4.51843568638817;
op[4]=((0.15445808)+(((-1.0)*x355))+x357);
op[5]=2.25921784319408;
op[6]=((0.15445808)+(((-1.0)*x356))+x358);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x359=(cj4*r22);
IkReal x360=(cj5*sj4);
IkReal x361=(r01*sj5);
IkReal x362=(cj5*r00);
IkReal x363=(cj4*r02);
IkReal x364=((1.00300013289883)*x363);
IkReal x365=((0.00035304)*x362);
IkReal x366=((0.00105912)*x362);
IkReal x367=((3.00900039869648)*x363);
IkReal x368=(r21*sj4*sj5);
IkReal x369=((0.0879345117183112)*r20*x360);
IkReal x370=((3.00900039869648)*sj4*x361);
IkReal x371=((0.263803535154934)*r20*x360);
IkReal x372=((1.00300013289883)*sj4*x361);
IkReal x373=(x365+x364+x369+x372);
IkReal x374=(x370+x371+x367+x366);
IkReal x375=((((0.263803535154934)*x359))+(((0.263803535154934)*x368))+(((0.00105912)*x361))+(((12.0)*px))+(((3.00900039869648)*r00*x360)));
IkReal x376=((((1.00300013289883)*r00*x360))+(((4.0)*px))+(((0.00035304)*x361))+(((0.0879345117183112)*x368))+(((0.0879345117183112)*x359)));
j1evalpoly[0]=((-1.12960892159704)+(((0.30891616)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.12960892159704)+(((-1.0)*x376))+x373))))+(((-1.0)*x376))+(((0.61783232)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.12960892159704)+x374+(((-1.0)*x375))))))+x373+(((htj1*htj1*htj1*htj1)*(((1.12960892159704)+x374+(((-1.0)*x375))))))+(((0.30891616)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x377=((0.0870967471696526)*cj4);
IkReal x378=(r02*sj1);
IkReal x379=(cj1*r22);
IkReal x380=((0.996199857775771)*cj4);
IkReal x381=((0.996199857775771)*sj1);
IkReal x382=(cj1*r02);
IkReal x383=((0.0870967471696526)*cj1);
IkReal x384=((0.996199857775771)*cj1);
IkReal x385=((0.0870967471696526)*sj1);
IkReal x386=(r22*sj1);
IkReal x387=(r21*sj4*sj5);
IkReal x388=(cj5*r00*sj4);
IkReal x389=(r01*sj4*sj5);
IkReal x390=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x385*x387))+((x381*x388))+(((-1.0)*x379*x380))+(((-1.0)*x383*x388))+(((-1.0)*x384*x387))+(((-1.0)*x377*x386))+(((-1.0)*x378*x380))+((x377*x382))+((x383*x389))+(((-1.0)*x381*x389))+((x385*x390))+((x384*x390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x385*x388))+((x381*x390))+((x385*x389))+((x384*x389))+(((-1.0)*x384*x388))+((x377*x379))+((x383*x387))+(((-1.0)*x381*x387))+(((-1.0)*x383*x390))+(((-1.0)*x380*x386))+((x377*x378))+((x380*x382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x385*x387))+((x381*x388))+(((-1.0)*x379*x380))+(((-1.0)*x383*x388))+(((-1.0)*x384*x387))+(((-1.0)*x377*x386))+(((-1.0)*x378*x380))+((x377*x382))+((x383*x389))+(((-1.0)*x381*x389))+((x385*x390))+((x384*x390))))+IKsqr(((((-1.0)*x385*x388))+((x381*x390))+((x385*x389))+((x384*x389))+(((-1.0)*x384*x388))+((x377*x379))+((x383*x387))+(((-1.0)*x381*x387))+(((-1.0)*x383*x390))+(((-1.0)*x380*x386))+((x377*x378))+((x380*x382))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x385*x387))+((x381*x388))+(((-1.0)*x379*x380))+(((-1.0)*x383*x388))+(((-1.0)*x384*x387))+(((-1.0)*x377*x386))+(((-1.0)*x378*x380))+((x377*x382))+((x383*x389))+(((-1.0)*x381*x389))+((x385*x390))+((x384*x390))), ((((-1.0)*x385*x388))+((x381*x390))+((x385*x389))+((x384*x389))+(((-1.0)*x384*x388))+((x377*x379))+((x383*x387))+(((-1.0)*x381*x387))+(((-1.0)*x383*x390))+(((-1.0)*x380*x386))+((x377*x378))+((x380*x382))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x391=IKsin(j2);
IkReal x392=IKcos(j2);
IkReal x393=(cj5*sj3);
IkReal x394=(sj3*sj5);
IkReal x395=(r21*sj5);
IkReal x396=(cj3*cj4);
IkReal x397=((8.826e-5)*cj5);
IkReal x398=(cj5*r20);
IkReal x399=(r01*sj5);
IkReal x400=((1.0)*sj4);
IkReal x401=((1.0)*cj4);
IkReal x402=(cj5*r00);
IkReal x403=(cj1*x392);
IkReal x404=((0.247882444952069)*x391);
IkReal x405=(cj1*x391);
IkReal x406=(sj1*x392);
IkReal x407=(cj3*x400);
IkReal x408=(sj1*x391);
IkReal x409=((0.996199857775771)*x408);
IkReal x410=((0.996199857775771)*x403);
IkReal x411=((0.0870967471696526)*x405);
IkReal x412=((0.0870967471696526)*x406);
IkReal x413=((0.0870967471696526)*x403);
IkReal x414=((0.996199857775771)*x405);
IkReal x415=((0.0870967471696526)*x408);
IkReal x416=((0.996199857775771)*x406);
IkReal x417=(x416+x415+x414);
IkReal x418=(x412+x411+x410);
evalcond[0]=((((-1.0)*r22*x401))+(((-1.0)*x417))+(((-1.0)*x395*x400))+x413+((sj4*x398)));
evalcond[1]=(((sj4*x402))+(((-1.0)*x409))+x418+(((-1.0)*x399*x400))+(((-1.0)*r02*x401)));
evalcond[2]=((((0.0437395992633951)*x403))+(((0.28240223039926)*sj1))+((r20*x397))+(((-0.247882444952069)*x406))+(((0.03861452)*cj1))+(((-1.0)*cj1*x404))+(((-8.826e-5)*x395))+(((-0.0437395992633951)*x408))+(((-1.0)*pz)));
evalcond[3]=((((-0.28240223039926)*cj1))+(((-1.0)*px))+(((-1.0)*sj1*x404))+(((0.0437395992633951)*x406))+(((-8.826e-5)*x399))+(((0.247882444952069)*x403))+((r00*x397))+(((0.0437395992633951)*x405))+(((0.03861452)*sj1)));
evalcond[4]=((((-1.0)*r22*x407))+((r20*x394))+((x395*x396))+(((-1.0)*x396*x398))+((r21*x393))+(((-1.0)*x418))+x409);
evalcond[5]=(((r01*x393))+((r00*x394))+(((-1.0)*x417))+((x396*x399))+(((-1.0)*r02*x407))+(((-1.0)*x396*x402))+x413);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x419=((1.0)*r01);
CheckValue<IkReal> x420 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x419))+(((-1.0)*r00*sj5)))),IkReal(((((-1.0)*cj4*sj5*x419))+((cj4*cj5*r00))+((r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
CheckValue<IkReal> x421=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r20*sj4))+((r21*sj4*sj5))+((cj4*r22)))),-1);
if(!x421.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x420.value)+(((1.5707963267949)*(x421.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x422=IKsin(j3);
IkReal x423=IKcos(j3);
IkReal x424=(cj4*cj5);
IkReal x425=(cj5*r11);
IkReal x426=(r12*sj4);
IkReal x427=((1.0)*x422);
IkReal x428=((1.0)*x423);
IkReal x429=(r10*x428);
IkReal x430=(cj4*sj5*x422);
evalcond[0]=(((x422*x425))+((cj4*r11*sj5*x423))+(((-1.0)*x426*x428))+(((-1.0)*x424*x429))+((r10*sj5*x422)));
evalcond[1]=((((-1.0)*r20*x424*x427))+((r21*x430))+(((-1.0)*r22*sj4*x427))+(((-1.0)*cj5*r21*x428))+(((-1.0)*r20*sj5*x428)));
evalcond[2]=(((r01*x430))+(((-1.0)*r00*sj5*x428))+(((-1.0)*r02*sj4*x427))+(((-1.0)*cj5*r01*x428))+(((-1.0)*r00*x424*x427)));
evalcond[3]=((1.0)+(((-1.0)*sj5*x429))+(((-1.0)*x426*x427))+(((-1.0)*r10*x424*x427))+((r11*x430))+(((-1.0)*x425*x428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x431=((0.263803535154934)*cj4);
IkReal x432=((0.00035304)*sj5);
IkReal x433=((0.0879345117183112)*sj4);
IkReal x434=(r01*sj5);
IkReal x435=(cj5*r20);
IkReal x436=(cj5*r00);
IkReal x437=((1.00300013289883)*sj4);
IkReal x438=(r21*sj5);
IkReal x439=((3.00900039869648)*sj4);
IkReal x440=((0.263803535154934)*sj4);
IkReal x441=((1.00300013289883)*cj4);
IkReal x442=(cj4*r22);
IkReal x443=(cj4*r02);
IkReal x444=((3.00900039869648)*x442);
IkReal x445=(r02*x431);
IkReal x446=((0.00105912)*x435);
IkReal x447=((0.00105912)*x436);
IkReal x448=((3.00900039869648)*x443);
IkReal x449=(sj4*x436);
IkReal x450=(x434*x440);
IkReal x451=(x438*x439);
IkReal x452=(x434*x439);
IkReal x453=(x435*x440);
IkReal x454=((((0.00105912)*x438))+((x435*x439))+((x436*x440))+(((12.0)*pz)));
IkReal x455=(x447+x453+x448+x452);
IkReal x456=(((r22*x431))+((x436*x439))+((x438*x440))+(((12.0)*px))+(((0.00105912)*x434)));
IkReal x457=(x451+x444+x446+x450+x445);
j1eval[0]=((10.2725360127763)+(IKabs(((-0.15445808)+(((-1.0)*r21*x432))+((x437*x438))+(((-1.0)*x435*x437))+((x433*x434))+(((-1.0)*x433*x436))+((r22*x441))+(((-4.0)*pz))+(((0.0879345117183112)*x443))+(((0.00035304)*x435)))))+(IKabs(((1.12960892159704)+((x434*x437))+(((-1.0)*r01*x432))+(((-1.0)*x436*x437))+((x433*x435))+((r02*x441))+(((-4.0)*px))+(((0.00035304)*x436))+(((-1.0)*x433*x438))+(((-0.0879345117183112)*x442)))))+(IKabs(((-1.12960892159704)+x455+(((-1.0)*x456)))))+(IKabs(((-0.15445808)+(((-1.0)*x454))+x457)))+(IKabs(((1.12960892159704)+x455+(((-1.0)*x456)))))+(IKabs(((0.15445808)+(((-1.0)*x454))+x457))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x458=(cj4*r02);
IkReal x459=(r21*sj5);
IkReal x460=((1.00300013289883)*sj4);
IkReal x461=((3.00900039869648)*sj4);
IkReal x462=(cj5*r20);
IkReal x463=(cj4*r22);
IkReal x464=((3.00900039869648)*x463);
IkReal x465=((0.263803535154934)*x458);
IkReal x466=((0.00105912)*x462);
IkReal x467=((1.00300013289883)*x463);
IkReal x468=((0.0879345117183112)*x458);
IkReal x469=((0.00035304)*x462);
IkReal x470=(cj5*r00*sj4);
IkReal x471=(r01*sj4*sj5);
IkReal x472=((0.263803535154934)*x471);
IkReal x473=(x459*x461);
IkReal x474=((0.0879345117183112)*x471);
IkReal x475=(x459*x460);
IkReal x476=(((x461*x462))+(((0.00105912)*x459))+(((12.0)*pz))+(((0.263803535154934)*x470)));
IkReal x477=((((0.0879345117183112)*x470))+(((0.00035304)*x459))+((x460*x462))+(((4.0)*pz)));
IkReal x478=(x465+x473+x472+x466+x464);
IkReal x479=(x469+x474+x475+x467+x468);
op[0]=((-0.15445808)+x479+(((-1.0)*x477)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+x478+(((-1.0)*x476)));
op[3]=4.51843568638817;
op[4]=((0.15445808)+x478+(((-1.0)*x476)));
op[5]=2.25921784319408;
op[6]=((0.15445808)+x479+(((-1.0)*x477)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x480=(cj4*r22);
IkReal x481=(cj5*sj4);
IkReal x482=(r01*sj5);
IkReal x483=(cj5*r00);
IkReal x484=(cj4*r02);
IkReal x485=((1.00300013289883)*x484);
IkReal x486=((0.00035304)*x483);
IkReal x487=((0.00105912)*x483);
IkReal x488=((3.00900039869648)*x484);
IkReal x489=(r21*sj4*sj5);
IkReal x490=((0.0879345117183112)*r20*x481);
IkReal x491=((3.00900039869648)*sj4*x482);
IkReal x492=((0.263803535154934)*r20*x481);
IkReal x493=((1.00300013289883)*sj4*x482);
IkReal x494=(x486+x490+x493+x485);
IkReal x495=(x488+x487+x492+x491);
IkReal x496=((((3.00900039869648)*r00*x481))+(((0.263803535154934)*x489))+(((0.263803535154934)*x480))+(((0.00105912)*x482))+(((12.0)*px)));
IkReal x497=((((0.00035304)*x482))+(((4.0)*px))+(((1.00300013289883)*r00*x481))+(((0.0879345117183112)*x480))+(((0.0879345117183112)*x489)));
j1evalpoly[0]=((-1.12960892159704)+(((0.30891616)*htj1))+(((0.61783232)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.12960892159704)+(((-1.0)*x497))+x494))))+(((htj1*htj1*htj1*htj1)*(((1.12960892159704)+x495+(((-1.0)*x496))))))+(((0.30891616)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x497))+(((htj1*htj1)*(((-1.12960892159704)+x495+(((-1.0)*x496))))))+x494);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x498=((0.0870967471696526)*cj4);
IkReal x499=(r02*sj1);
IkReal x500=(cj1*r22);
IkReal x501=((0.996199857775771)*cj4);
IkReal x502=((0.996199857775771)*sj1);
IkReal x503=(cj1*r02);
IkReal x504=((0.0870967471696526)*cj1);
IkReal x505=((0.996199857775771)*cj1);
IkReal x506=((0.0870967471696526)*sj1);
IkReal x507=(r22*sj1);
IkReal x508=(r21*sj4*sj5);
IkReal x509=(cj5*r00*sj4);
IkReal x510=(r01*sj4*sj5);
IkReal x511=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x504*x509))+((x502*x509))+(((-1.0)*x506*x508))+((x498*x503))+((x505*x511))+((x506*x511))+(((-1.0)*x505*x508))+((x504*x510))+(((-1.0)*x499*x501))+(((-1.0)*x502*x510))+(((-1.0)*x500*x501))+(((-1.0)*x498*x507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x501*x507))+(((-1.0)*x502*x508))+(((-1.0)*x504*x511))+((x498*x499))+((x502*x511))+(((-1.0)*x505*x509))+((x498*x500))+(((-1.0)*x506*x509))+((x501*x503))+((x504*x508))+((x505*x510))+((x506*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x504*x509))+((x502*x509))+(((-1.0)*x506*x508))+((x498*x503))+((x505*x511))+((x506*x511))+(((-1.0)*x505*x508))+((x504*x510))+(((-1.0)*x499*x501))+(((-1.0)*x502*x510))+(((-1.0)*x500*x501))+(((-1.0)*x498*x507))))+IKsqr(((((-1.0)*x501*x507))+(((-1.0)*x502*x508))+(((-1.0)*x504*x511))+((x498*x499))+((x502*x511))+(((-1.0)*x505*x509))+((x498*x500))+(((-1.0)*x506*x509))+((x501*x503))+((x504*x508))+((x505*x510))+((x506*x510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x504*x509))+((x502*x509))+(((-1.0)*x506*x508))+((x498*x503))+((x505*x511))+((x506*x511))+(((-1.0)*x505*x508))+((x504*x510))+(((-1.0)*x499*x501))+(((-1.0)*x502*x510))+(((-1.0)*x500*x501))+(((-1.0)*x498*x507))), ((((-1.0)*x501*x507))+(((-1.0)*x502*x508))+(((-1.0)*x504*x511))+((x498*x499))+((x502*x511))+(((-1.0)*x505*x509))+((x498*x500))+(((-1.0)*x506*x509))+((x501*x503))+((x504*x508))+((x505*x510))+((x506*x510))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x512=IKsin(j2);
IkReal x513=IKcos(j2);
IkReal x514=(cj5*sj3);
IkReal x515=(sj3*sj5);
IkReal x516=(r21*sj5);
IkReal x517=(cj3*cj4);
IkReal x518=((8.826e-5)*cj5);
IkReal x519=(cj5*r20);
IkReal x520=(r01*sj5);
IkReal x521=((1.0)*sj4);
IkReal x522=((1.0)*cj4);
IkReal x523=(cj5*r00);
IkReal x524=(cj1*x513);
IkReal x525=((0.247882444952069)*x512);
IkReal x526=(cj1*x512);
IkReal x527=(sj1*x513);
IkReal x528=(cj3*x521);
IkReal x529=(sj1*x512);
IkReal x530=((0.996199857775771)*x529);
IkReal x531=((0.996199857775771)*x524);
IkReal x532=((0.0870967471696526)*x526);
IkReal x533=((0.0870967471696526)*x527);
IkReal x534=((0.0870967471696526)*x524);
IkReal x535=((0.996199857775771)*x526);
IkReal x536=((0.0870967471696526)*x529);
IkReal x537=((0.996199857775771)*x527);
IkReal x538=(x537+x535+x536);
IkReal x539=(x533+x531+x532);
evalcond[0]=((((-1.0)*x538))+(((-1.0)*x516*x521))+(((-1.0)*r22*x522))+((sj4*x519))+x534);
evalcond[1]=(((sj4*x523))+(((-1.0)*x520*x521))+x539+(((-1.0)*r02*x522))+(((-1.0)*x530)));
evalcond[2]=((((0.28240223039926)*sj1))+(((0.0437395992633951)*x524))+(((0.03861452)*cj1))+(((-1.0)*cj1*x525))+(((-0.247882444952069)*x527))+(((-0.0437395992633951)*x529))+((r20*x518))+(((-1.0)*pz))+(((-8.826e-5)*x516)));
evalcond[3]=((((0.0437395992633951)*x527))+(((-8.826e-5)*x520))+(((0.0437395992633951)*x526))+(((-0.28240223039926)*cj1))+(((-1.0)*px))+((r00*x518))+(((0.247882444952069)*x524))+(((-1.0)*sj1*x525))+(((0.03861452)*sj1)));
evalcond[4]=((((-1.0)*x539))+((r21*x514))+((r20*x515))+((x516*x517))+x530+(((-1.0)*x517*x519))+(((-1.0)*r22*x528)));
evalcond[5]=(((x517*x520))+(((-1.0)*x538))+(((-1.0)*r02*x528))+(((-1.0)*x517*x523))+((r00*x515))+x534+((r01*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x540=((1.0)*cj5);
IkReal x541=((1.0)*sj5);
IkReal x542=(((cj4*r02))+((r01*sj4*sj5))+(((-1.0)*r00*sj4*x540)));
j3eval[0]=x542;
j3eval[1]=IKsign(x542);
j3eval[2]=((IKabs(((((-1.0)*r20*x541))+(((-1.0)*r21*x540)))))+(IKabs((((cj4*cj5*r20))+((r22*sj4))+(((-1.0)*cj4*r21*x541))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x543=((1.0)*r01);
IkReal x544=((1.0)*sj5);
IkReal x545=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x544)));
j3eval[0]=x545;
j3eval[1]=IKsign(x545);
j3eval[2]=((IKabs(((((-1.0)*cj5*x543))+(((-1.0)*r00*x544)))))+(IKabs(((((-1.0)*cj4*sj5*x543))+((cj4*cj5*r00))+((r02*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x546=cj5*cj5;
IkReal x547=cj4*cj4;
IkReal x548=r11*r11;
IkReal x549=r10*r10;
IkReal x550=r12*r12;
IkReal x551=(r11*sj5);
IkReal x552=(r12*sj4);
IkReal x553=((1.0)*r10);
IkReal x554=((2.0)*cj5*r10);
IkReal x555=((1.0)*x547);
IkReal x556=(x546*x548);
IkReal x557=(x546*x549);
IkReal x558=(((x547*x548))+x549+((cj4*x552*x554))+((x551*x554))+(((-2.0)*cj4*x551*x552))+x550+(((-1.0)*x550*x555))+x556+(((-1.0)*x557))+(((-1.0)*x547*x551*x554))+(((-1.0)*x555*x556))+((x547*x557)));
j3eval[0]=x558;
j3eval[1]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x553)))))+(IKabs((((cj4*x551))+(((-1.0)*cj4*cj5*x553))+(((-1.0)*x552))))));
j3eval[2]=IKsign(x558);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x559=cj5*cj5;
IkReal x560=cj4*cj4;
IkReal x561=r11*r11;
IkReal x562=r10*r10;
IkReal x563=r12*r12;
IkReal x564=(r11*sj5);
IkReal x565=(r12*sj4);
IkReal x566=((1.0)*r10);
IkReal x567=((2.0)*cj5*r10);
IkReal x568=((1.0)*x560);
IkReal x569=(x559*x561);
IkReal x570=(x559*x562);
CheckValue<IkReal> x571=IKPowWithIntegerCheck(IKsign((x569+((x564*x567))+((cj4*x565*x567))+((x560*x561))+(((-1.0)*x563*x568))+(((-1.0)*x570))+(((-2.0)*cj4*x564*x565))+(((-1.0)*x568*x569))+x562+x563+(((-1.0)*x560*x564*x567))+((x560*x570)))),-1);
if(!x571.valid){
continue;
}
CheckValue<IkReal> x572 = IKatan2WithCheck(IkReal(((((-1.0)*x565))+(((-1.0)*cj4*cj5*x566))+((cj4*x564)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x571.value)))+(x572.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x573=IKsin(j3);
IkReal x574=IKcos(j3);
IkReal x575=(cj4*cj5);
IkReal x576=(cj5*r11);
IkReal x577=(r12*sj4);
IkReal x578=((1.0)*x573);
IkReal x579=((1.0)*x574);
IkReal x580=(r10*x579);
IkReal x581=(cj4*sj5*x573);
evalcond[0]=(((cj4*r11*sj5*x574))+((x573*x576))+((r10*sj5*x573))+(((-1.0)*x575*x580))+(((-1.0)*x577*x579)));
evalcond[1]=((((-1.0)*cj5*r21*x579))+(((-1.0)*r20*sj5*x579))+(((-1.0)*r22*sj4*x578))+(((-1.0)*r20*x575*x578))+((r21*x581)));
evalcond[2]=((((-1.0)*cj5*r01*x579))+(((-1.0)*r02*sj4*x578))+((r01*x581))+(((-1.0)*r00*sj5*x579))+(((-1.0)*r00*x575*x578)));
evalcond[3]=((-1.0)+(((-1.0)*x577*x578))+(((-1.0)*r10*x575*x578))+(((-1.0)*sj5*x580))+(((-1.0)*x576*x579))+((r11*x581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x582=(r21*sj5);
IkReal x583=(cj3*cj4);
IkReal x584=(cj5*r20);
IkReal x585=((0.0879345117183112)*sj3);
IkReal x586=(r20*sj5);
IkReal x587=((1.00300013289883)*sj4);
IkReal x588=(cj4*r22);
IkReal x589=(cj5*r21);
IkReal x590=((0.263803535154934)*sj3);
IkReal x591=((3.00900039869648)*sj4);
IkReal x592=((3.00900039869648)*x588);
IkReal x593=((0.00105912)*x584);
IkReal x594=(cj3*r22*sj4);
IkReal x595=(x589*x590);
IkReal x596=(x586*x590);
IkReal x597=(x582*x591);
IkReal x598=((0.263803535154934)*x582*x583);
IkReal x599=((((0.263803535154934)*x594))+(((12.0)*pz))+((x584*x591))+(((0.263803535154934)*x583*x584))+(((0.00105912)*x582)));
IkReal x600=(x592+x595+x597+x598+x593+x596);
j1eval[0]=((9.03687137277633)+(IKabs(((-0.15445808)+(((-1.0)*x599))+x600)))+(IKabs(((0.15445808)+(((-1.0)*x599))+x600)))+(IKabs(((-0.15445808)+(((-0.0879345117183112)*x583*x584))+(((-1.0)*x584*x587))+(((1.00300013289883)*x588))+(((0.00035304)*x584))+(((-0.0879345117183112)*x594))+((x585*x589))+((x585*x586))+(((0.0879345117183112)*x582*x583))+(((-4.0)*pz))+((x582*x587))+(((-0.00035304)*x582))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x601=(r21*sj5);
IkReal x602=(cj3*cj4);
IkReal x603=(cj5*r20);
IkReal x604=((0.0879345117183112)*sj3);
IkReal x605=(r20*sj5);
IkReal x606=((1.00300013289883)*sj4);
IkReal x607=(cj4*r22);
IkReal x608=(cj5*r21);
IkReal x609=((0.263803535154934)*sj3);
IkReal x610=((3.00900039869648)*sj4);
IkReal x611=((3.00900039869648)*x607);
IkReal x612=((0.00105912)*x603);
IkReal x613=((1.00300013289883)*x607);
IkReal x614=((0.00035304)*x603);
IkReal x615=(cj3*r22*sj4);
IkReal x616=(x608*x609);
IkReal x617=(x605*x609);
IkReal x618=(x601*x610);
IkReal x619=(x604*x605);
IkReal x620=(x601*x606);
IkReal x621=(x604*x608);
IkReal x622=((0.263803535154934)*x601*x602);
IkReal x623=((0.0879345117183112)*x601*x602);
IkReal x624=(((x603*x610))+(((0.263803535154934)*x602*x603))+(((0.263803535154934)*x615))+(((0.00105912)*x601))+(((12.0)*pz)));
IkReal x625=(((x603*x606))+(((0.00035304)*x601))+(((0.0879345117183112)*x615))+(((0.0879345117183112)*x602*x603))+(((4.0)*pz)));
IkReal x626=(x612+x617+x618+x611+x622+x616);
IkReal x627=(x619+x620+x623+x613+x614+x621);
op[0]=((-0.15445808)+x627+(((-1.0)*x625)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+x626+(((-1.0)*x624)));
op[3]=4.51843568638817;
op[4]=((0.15445808)+x626+(((-1.0)*x624)));
op[5]=2.25921784319408;
op[6]=((0.15445808)+x627+(((-1.0)*x625)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x628=((0.0870967471696526)*cj4);
IkReal x629=(r02*sj1);
IkReal x630=(cj1*r22);
IkReal x631=((0.996199857775771)*cj4);
IkReal x632=((0.996199857775771)*sj1);
IkReal x633=(cj1*r02);
IkReal x634=((0.0870967471696526)*cj1);
IkReal x635=((0.996199857775771)*cj1);
IkReal x636=((0.0870967471696526)*sj1);
IkReal x637=(r22*sj1);
IkReal x638=(r21*sj4*sj5);
IkReal x639=(cj5*r00*sj4);
IkReal x640=(r01*sj4*sj5);
IkReal x641=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x635*x638))+((x635*x641))+((x636*x641))+((x629*x631))+((x634*x639))+(((-1.0)*x630*x631))+(((-1.0)*x632*x639))+(((-1.0)*x628*x633))+(((-1.0)*x636*x638))+(((-1.0)*x634*x640))+((x632*x640))+(((-1.0)*x628*x637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x634*x641))+(((-1.0)*x636*x640))+((x635*x639))+(((-1.0)*x632*x638))+((x628*x630))+(((-1.0)*x631*x637))+(((-1.0)*x631*x633))+(((-1.0)*x635*x640))+((x632*x641))+((x636*x639))+(((-1.0)*x628*x629))+((x634*x638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x635*x638))+((x635*x641))+((x636*x641))+((x629*x631))+((x634*x639))+(((-1.0)*x630*x631))+(((-1.0)*x632*x639))+(((-1.0)*x628*x633))+(((-1.0)*x636*x638))+(((-1.0)*x634*x640))+((x632*x640))+(((-1.0)*x628*x637))))+IKsqr(((((-1.0)*x634*x641))+(((-1.0)*x636*x640))+((x635*x639))+(((-1.0)*x632*x638))+((x628*x630))+(((-1.0)*x631*x637))+(((-1.0)*x631*x633))+(((-1.0)*x635*x640))+((x632*x641))+((x636*x639))+(((-1.0)*x628*x629))+((x634*x638))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x635*x638))+((x635*x641))+((x636*x641))+((x629*x631))+((x634*x639))+(((-1.0)*x630*x631))+(((-1.0)*x632*x639))+(((-1.0)*x628*x633))+(((-1.0)*x636*x638))+(((-1.0)*x634*x640))+((x632*x640))+(((-1.0)*x628*x637))), ((((-1.0)*x634*x641))+(((-1.0)*x636*x640))+((x635*x639))+(((-1.0)*x632*x638))+((x628*x630))+(((-1.0)*x631*x637))+(((-1.0)*x631*x633))+(((-1.0)*x635*x640))+((x632*x641))+((x636*x639))+(((-1.0)*x628*x629))+((x634*x638))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x642=IKsin(j2);
IkReal x643=IKcos(j2);
IkReal x644=(cj5*sj3);
IkReal x645=(sj3*sj5);
IkReal x646=(r21*sj5);
IkReal x647=(cj3*cj4);
IkReal x648=((8.826e-5)*cj5);
IkReal x649=(cj5*r20);
IkReal x650=(r01*sj5);
IkReal x651=((1.0)*sj4);
IkReal x652=((1.0)*cj4);
IkReal x653=(cj5*r00);
IkReal x654=(cj1*x643);
IkReal x655=((0.247882444952069)*x642);
IkReal x656=(cj1*x642);
IkReal x657=(sj1*x643);
IkReal x658=(cj3*x651);
IkReal x659=(sj1*x642);
IkReal x660=((0.996199857775771)*x659);
IkReal x661=((0.996199857775771)*x654);
IkReal x662=((0.0870967471696526)*x656);
IkReal x663=((0.0870967471696526)*x657);
IkReal x664=((0.996199857775771)*x656);
IkReal x665=((0.0870967471696526)*x659);
IkReal x666=((0.996199857775771)*x657);
IkReal x667=((0.0870967471696526)*x654);
IkReal x668=(x664+x666+x665);
IkReal x669=(x661+x662+x663);
evalcond[0]=(x667+((sj4*x649))+(((-1.0)*x668))+(((-1.0)*r22*x652))+(((-1.0)*x646*x651)));
evalcond[1]=((((-1.0)*r02*x652))+x660+(((-1.0)*x669))+((sj4*x653))+(((-1.0)*x650*x651)));
evalcond[2]=(((r20*x648))+(((-1.0)*cj1*x655))+(((0.0437395992633951)*x654))+(((0.28240223039926)*sj1))+(((0.03861452)*cj1))+(((-0.247882444952069)*x657))+(((-0.0437395992633951)*x659))+(((-8.826e-5)*x646))+(((-1.0)*pz)));
evalcond[3]=((((0.28240223039926)*cj1))+(((-0.0437395992633951)*x656))+(((-1.0)*px))+((sj1*x655))+(((-0.03861452)*sj1))+(((-8.826e-5)*x650))+(((-0.0437395992633951)*x657))+((r00*x648))+(((-0.247882444952069)*x654)));
evalcond[4]=(x660+((r20*x645))+((r21*x644))+(((-1.0)*x669))+((x646*x647))+(((-1.0)*x647*x649))+(((-1.0)*r22*x658)));
evalcond[5]=((((-1.0)*x667))+(((-1.0)*r02*x658))+((r01*x644))+((r00*x645))+x668+(((-1.0)*x647*x653))+((x647*x650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x670=((1.0)*sj5);
CheckValue<IkReal> x671=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x670)))),-1);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x670))+(((-1.0)*cj5*r01)))),IkReal(((((-1.0)*cj4*r01*x670))+((cj4*cj5*r00))+((r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x671.value)))+(x672.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x673=IKsin(j3);
IkReal x674=IKcos(j3);
IkReal x675=(cj4*cj5);
IkReal x676=(cj5*r11);
IkReal x677=(r12*sj4);
IkReal x678=((1.0)*x673);
IkReal x679=((1.0)*x674);
IkReal x680=(r10*x679);
IkReal x681=(cj4*sj5*x673);
evalcond[0]=((((-1.0)*x677*x679))+((x673*x676))+(((-1.0)*x675*x680))+((cj4*r11*sj5*x674))+((r10*sj5*x673)));
evalcond[1]=((((-1.0)*cj5*r21*x679))+(((-1.0)*r20*sj5*x679))+(((-1.0)*r20*x675*x678))+(((-1.0)*r22*sj4*x678))+((r21*x681)));
evalcond[2]=(((r01*x681))+(((-1.0)*r00*sj5*x679))+(((-1.0)*r02*sj4*x678))+(((-1.0)*r00*x675*x678))+(((-1.0)*cj5*r01*x679)));
evalcond[3]=((-1.0)+((r11*x681))+(((-1.0)*x676*x679))+(((-1.0)*r10*x675*x678))+(((-1.0)*sj5*x680))+(((-1.0)*x677*x678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x682=(r21*sj5);
IkReal x683=(cj3*cj4);
IkReal x684=(cj5*r20);
IkReal x685=((0.0879345117183112)*sj3);
IkReal x686=(r20*sj5);
IkReal x687=((1.00300013289883)*sj4);
IkReal x688=(cj4*r22);
IkReal x689=(cj5*r21);
IkReal x690=((0.263803535154934)*sj3);
IkReal x691=((3.00900039869648)*sj4);
IkReal x692=((3.00900039869648)*x688);
IkReal x693=((0.00105912)*x684);
IkReal x694=(cj3*r22*sj4);
IkReal x695=(x689*x690);
IkReal x696=(x686*x690);
IkReal x697=(x682*x691);
IkReal x698=((0.263803535154934)*x682*x683);
IkReal x699=((((0.263803535154934)*x683*x684))+(((0.00105912)*x682))+(((12.0)*pz))+(((0.263803535154934)*x694))+((x684*x691)));
IkReal x700=(x693+x696+x692+x697+x698+x695);
j1eval[0]=((9.03687137277633)+(IKabs(((0.15445808)+(((-1.0)*x699))+x700)))+(IKabs(((-0.15445808)+(((-1.0)*x699))+x700)))+(IKabs(((-0.15445808)+(((0.00035304)*x684))+(((-0.00035304)*x682))+(((-0.0879345117183112)*x683*x684))+((x685*x689))+(((1.00300013289883)*x688))+((x685*x686))+(((-4.0)*pz))+(((-1.0)*x684*x687))+((x682*x687))+(((0.0879345117183112)*x682*x683))+(((-0.0879345117183112)*x694))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x701=(r21*sj5);
IkReal x702=(cj3*cj4);
IkReal x703=(cj5*r20);
IkReal x704=((0.0879345117183112)*sj3);
IkReal x705=(r20*sj5);
IkReal x706=((1.00300013289883)*sj4);
IkReal x707=(cj4*r22);
IkReal x708=(cj5*r21);
IkReal x709=((0.263803535154934)*sj3);
IkReal x710=((3.00900039869648)*sj4);
IkReal x711=((3.00900039869648)*x707);
IkReal x712=((0.00105912)*x703);
IkReal x713=((1.00300013289883)*x707);
IkReal x714=((0.00035304)*x703);
IkReal x715=(cj3*r22*sj4);
IkReal x716=(x708*x709);
IkReal x717=(x705*x709);
IkReal x718=(x701*x710);
IkReal x719=(x704*x705);
IkReal x720=(x701*x706);
IkReal x721=(x704*x708);
IkReal x722=((0.263803535154934)*x701*x702);
IkReal x723=((0.0879345117183112)*x701*x702);
IkReal x724=((((0.00105912)*x701))+(((0.263803535154934)*x715))+(((0.263803535154934)*x702*x703))+((x703*x710))+(((12.0)*pz)));
IkReal x725=((((0.00035304)*x701))+(((0.0879345117183112)*x702*x703))+(((0.0879345117183112)*x715))+((x703*x706))+(((4.0)*pz)));
IkReal x726=(x711+x718+x722+x717+x712+x716);
IkReal x727=(x720+x713+x719+x721+x723+x714);
op[0]=((-0.15445808)+x727+(((-1.0)*x725)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+(((-1.0)*x724))+x726);
op[3]=4.51843568638817;
op[4]=((0.15445808)+(((-1.0)*x724))+x726);
op[5]=2.25921784319408;
op[6]=((0.15445808)+x727+(((-1.0)*x725)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x728=((0.0870967471696526)*cj4);
IkReal x729=(r02*sj1);
IkReal x730=(cj1*r22);
IkReal x731=((0.996199857775771)*cj4);
IkReal x732=((0.996199857775771)*sj1);
IkReal x733=(cj1*r02);
IkReal x734=((0.0870967471696526)*cj1);
IkReal x735=((0.996199857775771)*cj1);
IkReal x736=((0.0870967471696526)*sj1);
IkReal x737=(r22*sj1);
IkReal x738=(r21*sj4*sj5);
IkReal x739=(cj5*r00*sj4);
IkReal x740=(r01*sj4*sj5);
IkReal x741=(cj5*r20*sj4);
if( IKabs((((x732*x740))+((x734*x739))+(((-1.0)*x730*x731))+(((-1.0)*x728*x733))+(((-1.0)*x728*x737))+(((-1.0)*x732*x739))+(((-1.0)*x735*x738))+((x736*x741))+(((-1.0)*x736*x738))+((x735*x741))+(((-1.0)*x734*x740))+((x729*x731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x736*x740))+(((-1.0)*x734*x741))+(((-1.0)*x732*x738))+((x734*x738))+(((-1.0)*x728*x729))+((x732*x741))+(((-1.0)*x731*x733))+(((-1.0)*x731*x737))+((x735*x739))+(((-1.0)*x735*x740))+((x728*x730))+((x736*x739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x732*x740))+((x734*x739))+(((-1.0)*x730*x731))+(((-1.0)*x728*x733))+(((-1.0)*x728*x737))+(((-1.0)*x732*x739))+(((-1.0)*x735*x738))+((x736*x741))+(((-1.0)*x736*x738))+((x735*x741))+(((-1.0)*x734*x740))+((x729*x731))))+IKsqr(((((-1.0)*x736*x740))+(((-1.0)*x734*x741))+(((-1.0)*x732*x738))+((x734*x738))+(((-1.0)*x728*x729))+((x732*x741))+(((-1.0)*x731*x733))+(((-1.0)*x731*x737))+((x735*x739))+(((-1.0)*x735*x740))+((x728*x730))+((x736*x739))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x732*x740))+((x734*x739))+(((-1.0)*x730*x731))+(((-1.0)*x728*x733))+(((-1.0)*x728*x737))+(((-1.0)*x732*x739))+(((-1.0)*x735*x738))+((x736*x741))+(((-1.0)*x736*x738))+((x735*x741))+(((-1.0)*x734*x740))+((x729*x731))), ((((-1.0)*x736*x740))+(((-1.0)*x734*x741))+(((-1.0)*x732*x738))+((x734*x738))+(((-1.0)*x728*x729))+((x732*x741))+(((-1.0)*x731*x733))+(((-1.0)*x731*x737))+((x735*x739))+(((-1.0)*x735*x740))+((x728*x730))+((x736*x739))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x742=IKsin(j2);
IkReal x743=IKcos(j2);
IkReal x744=(cj5*sj3);
IkReal x745=(sj3*sj5);
IkReal x746=(r21*sj5);
IkReal x747=(cj3*cj4);
IkReal x748=((8.826e-5)*cj5);
IkReal x749=(cj5*r20);
IkReal x750=(r01*sj5);
IkReal x751=((1.0)*sj4);
IkReal x752=((1.0)*cj4);
IkReal x753=(cj5*r00);
IkReal x754=(cj1*x743);
IkReal x755=((0.247882444952069)*x742);
IkReal x756=(cj1*x742);
IkReal x757=(sj1*x743);
IkReal x758=(cj3*x751);
IkReal x759=(sj1*x742);
IkReal x760=((0.996199857775771)*x759);
IkReal x761=((0.996199857775771)*x754);
IkReal x762=((0.0870967471696526)*x756);
IkReal x763=((0.0870967471696526)*x757);
IkReal x764=((0.996199857775771)*x756);
IkReal x765=((0.0870967471696526)*x759);
IkReal x766=((0.996199857775771)*x757);
IkReal x767=((0.0870967471696526)*x754);
IkReal x768=(x764+x766+x765);
IkReal x769=(x762+x761+x763);
evalcond[0]=((((-1.0)*r22*x752))+x767+(((-1.0)*x746*x751))+((sj4*x749))+(((-1.0)*x768)));
evalcond[1]=(x760+(((-1.0)*x769))+(((-1.0)*x750*x751))+(((-1.0)*r02*x752))+((sj4*x753)));
evalcond[2]=(((r20*x748))+(((0.28240223039926)*sj1))+(((-0.247882444952069)*x757))+(((-0.0437395992633951)*x759))+(((0.03861452)*cj1))+(((-8.826e-5)*x746))+(((0.0437395992633951)*x754))+(((-1.0)*cj1*x755))+(((-1.0)*pz)));
evalcond[3]=((((-0.0437395992633951)*x756))+((sj1*x755))+(((0.28240223039926)*cj1))+(((-1.0)*px))+(((-0.03861452)*sj1))+(((-0.247882444952069)*x754))+((r00*x748))+(((-0.0437395992633951)*x757))+(((-8.826e-5)*x750)));
evalcond[4]=(x760+((x746*x747))+((r21*x744))+(((-1.0)*x769))+(((-1.0)*x747*x749))+((r20*x745))+(((-1.0)*r22*x758)));
evalcond[5]=((((-1.0)*r02*x758))+x768+(((-1.0)*x747*x753))+(((-1.0)*x767))+((r01*x744))+((r00*x745))+((x747*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x770=((1.0)*sj5);
IkReal x771=((1.0)*cj5);
CheckValue<IkReal> x772=IKPowWithIntegerCheck(IKsign((((cj4*r02))+(((-1.0)*r00*sj4*x771))+((r01*sj4*sj5)))),-1);
if(!x772.valid){
continue;
}
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x770))+(((-1.0)*r21*x771)))),IkReal(((((-1.0)*cj4*r21*x770))+((cj4*cj5*r20))+((r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x772.value)))+(x773.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x774=IKsin(j3);
IkReal x775=IKcos(j3);
IkReal x776=(cj4*cj5);
IkReal x777=(cj5*r11);
IkReal x778=(r12*sj4);
IkReal x779=((1.0)*x774);
IkReal x780=((1.0)*x775);
IkReal x781=(r10*x780);
IkReal x782=(cj4*sj5*x774);
evalcond[0]=(((r10*sj5*x774))+((cj4*r11*sj5*x775))+(((-1.0)*x776*x781))+(((-1.0)*x778*x780))+((x774*x777)));
evalcond[1]=((((-1.0)*r22*sj4*x779))+(((-1.0)*r20*x776*x779))+(((-1.0)*cj5*r21*x780))+(((-1.0)*r20*sj5*x780))+((r21*x782)));
evalcond[2]=((((-1.0)*r02*sj4*x779))+(((-1.0)*r00*x776*x779))+((r01*x782))+(((-1.0)*cj5*r01*x780))+(((-1.0)*r00*sj5*x780)));
evalcond[3]=((-1.0)+(((-1.0)*x777*x780))+(((-1.0)*r10*x776*x779))+(((-1.0)*sj5*x781))+(((-1.0)*x778*x779))+((r11*x782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x783=(r21*sj5);
IkReal x784=(cj3*cj4);
IkReal x785=(cj5*r20);
IkReal x786=((0.0879345117183112)*sj3);
IkReal x787=(r20*sj5);
IkReal x788=((1.00300013289883)*sj4);
IkReal x789=(cj4*r22);
IkReal x790=(cj5*r21);
IkReal x791=((0.263803535154934)*sj3);
IkReal x792=((3.00900039869648)*sj4);
IkReal x793=((3.00900039869648)*x789);
IkReal x794=((0.00105912)*x785);
IkReal x795=(cj3*r22*sj4);
IkReal x796=(x790*x791);
IkReal x797=(x787*x791);
IkReal x798=(x783*x792);
IkReal x799=((0.263803535154934)*x783*x784);
IkReal x800=((((0.00105912)*x783))+(((0.263803535154934)*x784*x785))+(((0.263803535154934)*x795))+((x785*x792))+(((12.0)*pz)));
IkReal x801=(x794+x797+x796+x793+x798+x799);
j1eval[0]=((9.03687137277633)+(IKabs(((-0.15445808)+((x786*x790))+(((-0.0879345117183112)*x795))+((x786*x787))+(((-0.0879345117183112)*x784*x785))+(((0.00035304)*x785))+(((0.0879345117183112)*x783*x784))+(((-4.0)*pz))+((x783*x788))+(((-0.00035304)*x783))+(((1.00300013289883)*x789))+(((-1.0)*x785*x788)))))+(IKabs(((0.15445808)+x801+(((-1.0)*x800)))))+(IKabs(((-0.15445808)+x801+(((-1.0)*x800))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x802=(r21*sj5);
IkReal x803=(cj3*cj4);
IkReal x804=(cj5*r20);
IkReal x805=((0.0879345117183112)*sj3);
IkReal x806=(r20*sj5);
IkReal x807=((1.00300013289883)*sj4);
IkReal x808=(cj4*r22);
IkReal x809=(cj5*r21);
IkReal x810=((0.263803535154934)*sj3);
IkReal x811=((3.00900039869648)*sj4);
IkReal x812=((3.00900039869648)*x808);
IkReal x813=((0.00105912)*x804);
IkReal x814=((1.00300013289883)*x808);
IkReal x815=((0.00035304)*x804);
IkReal x816=(cj3*r22*sj4);
IkReal x817=(x809*x810);
IkReal x818=(x806*x810);
IkReal x819=(x802*x811);
IkReal x820=(x805*x806);
IkReal x821=(x802*x807);
IkReal x822=(x805*x809);
IkReal x823=((0.263803535154934)*x802*x803);
IkReal x824=((0.0879345117183112)*x802*x803);
IkReal x825=((((0.263803535154934)*x816))+(((0.00105912)*x802))+(((12.0)*pz))+((x804*x811))+(((0.263803535154934)*x803*x804)));
IkReal x826=((((0.00035304)*x802))+(((0.0879345117183112)*x816))+((x804*x807))+(((0.0879345117183112)*x803*x804))+(((4.0)*pz)));
IkReal x827=(x823+x817+x812+x818+x819+x813);
IkReal x828=(x824+x820+x822+x815+x821+x814);
op[0]=((-0.15445808)+x828+(((-1.0)*x826)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+(((-1.0)*x825))+x827);
op[3]=4.51843568638817;
op[4]=((0.15445808)+(((-1.0)*x825))+x827);
op[5]=2.25921784319408;
op[6]=((0.15445808)+x828+(((-1.0)*x826)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x829=((0.0870967471696526)*cj4);
IkReal x830=(r02*sj1);
IkReal x831=(cj1*r22);
IkReal x832=((0.996199857775771)*cj4);
IkReal x833=((0.996199857775771)*sj1);
IkReal x834=(cj1*r02);
IkReal x835=((0.0870967471696526)*cj1);
IkReal x836=((0.996199857775771)*cj1);
IkReal x837=((0.0870967471696526)*sj1);
IkReal x838=(r22*sj1);
IkReal x839=(r21*sj4*sj5);
IkReal x840=(cj5*r00*sj4);
IkReal x841=(r01*sj4*sj5);
IkReal x842=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x837*x839))+(((-1.0)*x835*x841))+((x836*x842))+(((-1.0)*x831*x832))+((x830*x832))+((x835*x840))+(((-1.0)*x833*x840))+(((-1.0)*x836*x839))+((x837*x842))+(((-1.0)*x829*x834))+((x833*x841))+(((-1.0)*x829*x838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x835*x839))+((x837*x840))+(((-1.0)*x833*x839))+(((-1.0)*x829*x830))+((x836*x840))+(((-1.0)*x832*x838))+(((-1.0)*x836*x841))+((x833*x842))+((x829*x831))+(((-1.0)*x835*x842))+(((-1.0)*x837*x841))+(((-1.0)*x832*x834)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x837*x839))+(((-1.0)*x835*x841))+((x836*x842))+(((-1.0)*x831*x832))+((x830*x832))+((x835*x840))+(((-1.0)*x833*x840))+(((-1.0)*x836*x839))+((x837*x842))+(((-1.0)*x829*x834))+((x833*x841))+(((-1.0)*x829*x838))))+IKsqr((((x835*x839))+((x837*x840))+(((-1.0)*x833*x839))+(((-1.0)*x829*x830))+((x836*x840))+(((-1.0)*x832*x838))+(((-1.0)*x836*x841))+((x833*x842))+((x829*x831))+(((-1.0)*x835*x842))+(((-1.0)*x837*x841))+(((-1.0)*x832*x834))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x837*x839))+(((-1.0)*x835*x841))+((x836*x842))+(((-1.0)*x831*x832))+((x830*x832))+((x835*x840))+(((-1.0)*x833*x840))+(((-1.0)*x836*x839))+((x837*x842))+(((-1.0)*x829*x834))+((x833*x841))+(((-1.0)*x829*x838))), (((x835*x839))+((x837*x840))+(((-1.0)*x833*x839))+(((-1.0)*x829*x830))+((x836*x840))+(((-1.0)*x832*x838))+(((-1.0)*x836*x841))+((x833*x842))+((x829*x831))+(((-1.0)*x835*x842))+(((-1.0)*x837*x841))+(((-1.0)*x832*x834))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x843=IKsin(j2);
IkReal x844=IKcos(j2);
IkReal x845=(cj5*sj3);
IkReal x846=(sj3*sj5);
IkReal x847=(r21*sj5);
IkReal x848=(cj3*cj4);
IkReal x849=((8.826e-5)*cj5);
IkReal x850=(cj5*r20);
IkReal x851=(r01*sj5);
IkReal x852=((1.0)*sj4);
IkReal x853=((1.0)*cj4);
IkReal x854=(cj5*r00);
IkReal x855=(cj1*x844);
IkReal x856=((0.247882444952069)*x843);
IkReal x857=(cj1*x843);
IkReal x858=(sj1*x844);
IkReal x859=(cj3*x852);
IkReal x860=(sj1*x843);
IkReal x861=((0.996199857775771)*x860);
IkReal x862=((0.996199857775771)*x855);
IkReal x863=((0.0870967471696526)*x857);
IkReal x864=((0.0870967471696526)*x858);
IkReal x865=((0.996199857775771)*x857);
IkReal x866=((0.0870967471696526)*x860);
IkReal x867=((0.996199857775771)*x858);
IkReal x868=((0.0870967471696526)*x855);
IkReal x869=(x867+x866+x865);
IkReal x870=(x863+x862+x864);
evalcond[0]=((((-1.0)*x869))+((sj4*x850))+(((-1.0)*r22*x853))+x868+(((-1.0)*x847*x852)));
evalcond[1]=((((-1.0)*x851*x852))+x861+(((-1.0)*x870))+((sj4*x854))+(((-1.0)*r02*x853)));
evalcond[2]=((((-1.0)*cj1*x856))+(((-0.247882444952069)*x858))+(((0.28240223039926)*sj1))+(((-0.0437395992633951)*x860))+(((0.03861452)*cj1))+((r20*x849))+(((-8.826e-5)*x847))+(((0.0437395992633951)*x855))+(((-1.0)*pz)));
evalcond[3]=((((0.28240223039926)*cj1))+(((-1.0)*px))+(((-0.03861452)*sj1))+((r00*x849))+((sj1*x856))+(((-0.0437395992633951)*x858))+(((-8.826e-5)*x851))+(((-0.247882444952069)*x855))+(((-0.0437395992633951)*x857)));
evalcond[4]=((((-1.0)*r22*x859))+((r21*x845))+(((-1.0)*x848*x850))+((x847*x848))+((r20*x846))+x861+(((-1.0)*x870)));
evalcond[5]=(((r00*x846))+(((-1.0)*x868))+(((-1.0)*x848*x854))+((x848*x851))+(((-1.0)*r02*x859))+((r01*x845))+x869);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x871=((1.0)*sj5);
IkReal x872=((1.0)*cj5);
IkReal x873=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x872)));
j3eval[0]=x873;
j3eval[1]=((IKabs(((((-1.0)*r11*x872))+(((-1.0)*r10*x871)))))+(IKabs((((r12*sj4))+(((-1.0)*cj4*r11*x871))+((cj4*cj5*r10))))));
j3eval[2]=IKsign(x873);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x874=((1.0)*r21);
IkReal x875=((1.0)*sj5);
IkReal x876=((((-1.0)*r11*sj4*x875))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)));
j3eval[0]=x876;
j3eval[1]=IKsign(x876);
j3eval[2]=((IKabs((((cj4*cj5*r20))+(((-1.0)*cj4*sj5*x874))+((r22*sj4)))))+(IKabs(((((-1.0)*r20*x875))+(((-1.0)*cj5*x874))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x877=cj5*cj5;
IkReal x878=r00*r00;
IkReal x879=cj4*cj4;
IkReal x880=r01*r01;
IkReal x881=r02*r02;
IkReal x882=(r01*sj5);
IkReal x883=(r02*sj4);
IkReal x884=(cj5*r00);
IkReal x885=((2.0)*cj4);
IkReal x886=(x877*x878);
IkReal x887=(x879*x880);
IkReal x888=((((-1.0)*x886))+x887+(((-1.0)*x879*x881))+((x877*x880))+((x883*x884*x885))+x881+x878+(((-1.0)*x882*x883*x885))+(((-1.0)*x877*x887))+(((-2.0)*x879*x882*x884))+(((2.0)*x882*x884))+((x879*x886)));
j3eval[0]=x888;
j3eval[1]=IKsign(x888);
j3eval[2]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs(((((-1.0)*cj4*x884))+(((-1.0)*x883))+((cj4*x882))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x889=cj5*cj5;
IkReal x890=r00*r00;
IkReal x891=cj4*cj4;
IkReal x892=r01*r01;
IkReal x893=r02*r02;
IkReal x894=(r01*sj5);
IkReal x895=(r02*sj4);
IkReal x896=(cj5*r00);
IkReal x897=((2.0)*cj4);
IkReal x898=(x889*x890);
IkReal x899=(x891*x892);
CheckValue<IkReal> x900 = IKatan2WithCheck(IkReal((((cj4*x894))+(((-1.0)*cj4*x896))+(((-1.0)*x895)))),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x900.valid){
continue;
}
CheckValue<IkReal> x901=IKPowWithIntegerCheck(IKsign((x893+((x895*x896*x897))+(((-1.0)*x894*x895*x897))+(((-2.0)*x891*x894*x896))+x899+(((-1.0)*x891*x893))+(((2.0)*x894*x896))+((x889*x892))+x890+((x891*x898))+(((-1.0)*x889*x899))+(((-1.0)*x898)))),-1);
if(!x901.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x900.value)+(((1.5707963267949)*(x901.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x902=IKsin(j3);
IkReal x903=IKcos(j3);
IkReal x904=(cj4*cj5);
IkReal x905=(r02*sj4);
IkReal x906=(cj5*r01);
IkReal x907=(r00*sj5);
IkReal x908=((1.0)*x903);
IkReal x909=((1.0)*x902);
IkReal x910=(cj4*sj5*x902);
evalcond[0]=(((x902*x906))+((cj4*r01*sj5*x903))+(((-1.0)*r00*x904*x908))+((x902*x907))+(((-1.0)*x905*x908)));
evalcond[1]=((((-1.0)*cj5*r21*x908))+(((-1.0)*r22*sj4*x909))+((r21*x910))+(((-1.0)*r20*x904*x909))+(((-1.0)*r20*sj5*x908)));
evalcond[2]=((((-1.0)*r10*x904*x909))+(((-1.0)*r10*sj5*x908))+(((-1.0)*cj5*r11*x908))+(((-1.0)*r12*sj4*x909))+((r11*x910)));
evalcond[3]=((-1.0)+(((-1.0)*x906*x908))+((r01*x910))+(((-1.0)*x905*x909))+(((-1.0)*r00*x904*x909))+(((-1.0)*x907*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x911=((0.263803535154934)*cj4);
IkReal x912=(r21*sj5);
IkReal x913=(cj4*r12);
IkReal x914=(cj5*r10);
IkReal x915=((0.263803535154934)*sj4);
IkReal x916=(cj5*r20);
IkReal x917=((0.0879345117183112)*sj4);
IkReal x918=((1.00300013289883)*sj4);
IkReal x919=(r11*sj5);
IkReal x920=(cj4*r22);
IkReal x921=((3.00900039869648)*sj4);
IkReal x922=((0.00105912)*x914);
IkReal x923=((3.00900039869648)*x913);
IkReal x924=(r12*x911);
IkReal x925=((3.00900039869648)*x920);
IkReal x926=((0.00105912)*x916);
IkReal x927=(x919*x921);
IkReal x928=(x915*x916);
IkReal x929=(x915*x919);
IkReal x930=(x912*x921);
IkReal x931=(((x914*x915))+(((12.0)*pz))+((x916*x921))+(((0.00105912)*x912)));
IkReal x932=(x922+x923+x927+x928);
IkReal x933=(((x914*x921))+(((12.0)*py))+((r22*x911))+((x912*x915))+(((0.00105912)*x919)));
IkReal x934=(x926+x929+x924+x925+x930);
j1eval[0]=((10.2725360127763)+(IKabs(((1.12960892159704)+(((-1.0)*x914*x918))+(((1.00300013289883)*x913))+(((0.00035304)*x914))+((x918*x919))+(((-0.00035304)*x919))+(((-1.0)*x912*x917))+(((-0.0879345117183112)*x920))+((x916*x917))+(((-4.0)*py)))))+(IKabs(((0.15445808)+x934+(((-1.0)*x931)))))+(IKabs(((-1.12960892159704)+x932+(((-1.0)*x933)))))+(IKabs(((-0.15445808)+(((1.00300013289883)*x920))+(((0.00035304)*x916))+(((-1.0)*x914*x917))+(((-4.0)*pz))+(((-1.0)*x916*x918))+((x912*x918))+(((-0.00035304)*x912))+((x917*x919))+(((0.0879345117183112)*x913)))))+(IKabs(((-0.15445808)+x934+(((-1.0)*x931)))))+(IKabs(((1.12960892159704)+x932+(((-1.0)*x933))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x935=(r21*sj5);
IkReal x936=((1.00300013289883)*sj4);
IkReal x937=(cj4*r12);
IkReal x938=((0.263803535154934)*sj4);
IkReal x939=(r11*sj5);
IkReal x940=(cj4*r22);
IkReal x941=((3.00900039869648)*sj4);
IkReal x942=(cj5*r20);
IkReal x943=(cj5*r10);
IkReal x944=((0.0879345117183112)*sj4);
IkReal x945=((0.263803535154934)*x937);
IkReal x946=((3.00900039869648)*x940);
IkReal x947=((0.00105912)*x942);
IkReal x948=((1.00300013289883)*x940);
IkReal x949=((0.00035304)*x942);
IkReal x950=((0.0879345117183112)*x937);
IkReal x951=(x938*x939);
IkReal x952=(x935*x941);
IkReal x953=(x935*x936);
IkReal x954=(x939*x944);
IkReal x955=(((x938*x943))+((x941*x942))+(((12.0)*pz))+(((0.00105912)*x935)));
IkReal x956=(((x936*x942))+((x943*x944))+(((0.00035304)*x935))+(((4.0)*pz)));
IkReal x957=(x953+x954+x950+x949+x948);
IkReal x958=(x952+x945+x946+x951+x947);
op[0]=((-0.15445808)+x957+(((-1.0)*x956)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+(((-1.0)*x955))+x958);
op[3]=4.51843568638817;
op[4]=((0.15445808)+(((-1.0)*x955))+x958);
op[5]=2.25921784319408;
op[6]=((0.15445808)+x957+(((-1.0)*x956)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x959=(cj4*r22);
IkReal x960=(cj5*r10);
IkReal x961=(cj4*r12);
IkReal x962=((0.0879345117183112)*sj4);
IkReal x963=(cj5*r20);
IkReal x964=(r21*sj5);
IkReal x965=((0.263803535154934)*sj4);
IkReal x966=((3.00900039869648)*sj4);
IkReal x967=(r11*sj5);
IkReal x968=((1.00300013289883)*sj4);
IkReal x969=((0.00035304)*x960);
IkReal x970=((1.00300013289883)*x961);
IkReal x971=((0.00105912)*x960);
IkReal x972=((3.00900039869648)*x961);
IkReal x973=(x962*x963);
IkReal x974=(x967*x968);
IkReal x975=(x966*x967);
IkReal x976=(x963*x965);
IkReal x977=(x972+x971+x976+x975);
IkReal x978=(x969+x974+x973+x970);
IkReal x979=((((12.0)*py))+((x964*x965))+(((0.263803535154934)*x959))+(((0.00105912)*x967))+((x960*x966)));
IkReal x980=((((4.0)*py))+((x962*x964))+((x960*x968))+(((0.0879345117183112)*x959))+(((0.00035304)*x967)));
j1evalpoly[0]=((-1.12960892159704)+(((0.30891616)*htj1))+(((-1.0)*x980))+(((0.61783232)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.12960892159704)+(((-1.0)*x980))+x978))))+x978+(((htj1*htj1)*(((-1.12960892159704)+(((-1.0)*x979))+x977))))+(((htj1*htj1*htj1*htj1)*(((1.12960892159704)+(((-1.0)*x979))+x977))))+(((0.30891616)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x981=(cj5*r10);
IkReal x982=((0.0870967471696526)*cj1);
IkReal x983=(r11*sj5);
IkReal x984=(cj4*r22);
IkReal x985=(r21*sj5);
IkReal x986=((0.996199857775771)*cj1);
IkReal x987=(cj4*r12);
IkReal x988=((0.0870967471696526)*sj1);
IkReal x989=((0.996199857775771)*sj1);
IkReal x990=(sj4*x989);
IkReal x991=(cj5*r20*sj4);
if( IKabs((((x986*x991))+(((-1.0)*sj4*x985*x986))+(((-1.0)*x983*x990))+(((-1.0)*sj4*x985*x988))+(((-1.0)*x987*x989))+((x982*x987))+((x981*x990))+(((-1.0)*x984*x986))+((sj4*x982*x983))+(((-1.0)*sj4*x981*x982))+((x988*x991))+(((-1.0)*x984*x988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x982*x984))+((cj5*r20*x990))+(((-1.0)*x984*x989))+((x987*x988))+(((-1.0)*x985*x990))+((sj4*x983*x986))+(((-1.0)*sj4*x981*x986))+(((-1.0)*sj4*x981*x988))+((sj4*x983*x988))+((x986*x987))+((sj4*x982*x985))+(((-1.0)*x982*x991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x986*x991))+(((-1.0)*sj4*x985*x986))+(((-1.0)*x983*x990))+(((-1.0)*sj4*x985*x988))+(((-1.0)*x987*x989))+((x982*x987))+((x981*x990))+(((-1.0)*x984*x986))+((sj4*x982*x983))+(((-1.0)*sj4*x981*x982))+((x988*x991))+(((-1.0)*x984*x988))))+IKsqr((((x982*x984))+((cj5*r20*x990))+(((-1.0)*x984*x989))+((x987*x988))+(((-1.0)*x985*x990))+((sj4*x983*x986))+(((-1.0)*sj4*x981*x986))+(((-1.0)*sj4*x981*x988))+((sj4*x983*x988))+((x986*x987))+((sj4*x982*x985))+(((-1.0)*x982*x991))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x986*x991))+(((-1.0)*sj4*x985*x986))+(((-1.0)*x983*x990))+(((-1.0)*sj4*x985*x988))+(((-1.0)*x987*x989))+((x982*x987))+((x981*x990))+(((-1.0)*x984*x986))+((sj4*x982*x983))+(((-1.0)*sj4*x981*x982))+((x988*x991))+(((-1.0)*x984*x988))), (((x982*x984))+((cj5*r20*x990))+(((-1.0)*x984*x989))+((x987*x988))+(((-1.0)*x985*x990))+((sj4*x983*x986))+(((-1.0)*sj4*x981*x986))+(((-1.0)*sj4*x981*x988))+((sj4*x983*x988))+((x986*x987))+((sj4*x982*x985))+(((-1.0)*x982*x991))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x992=IKsin(j2);
IkReal x993=IKcos(j2);
IkReal x994=((1.0)*cj4);
IkReal x995=(sj3*sj5);
IkReal x996=((8.826e-5)*cj5);
IkReal x997=((1.0)*sj4);
IkReal x998=(r11*sj5);
IkReal x999=(cj5*r20);
IkReal x1000=(r21*sj5);
IkReal x1001=(cj5*r10);
IkReal x1002=(cj5*sj3);
IkReal x1003=(cj1*x993);
IkReal x1004=((0.247882444952069)*x992);
IkReal x1005=(cj1*x992);
IkReal x1006=(cj3*cj4*sj5);
IkReal x1007=(sj1*x993);
IkReal x1008=(sj1*x992);
IkReal x1009=((0.996199857775771)*x1008);
IkReal x1010=((0.996199857775771)*x1003);
IkReal x1011=((0.0870967471696526)*x1005);
IkReal x1012=((0.0870967471696526)*x1007);
IkReal x1013=((0.0870967471696526)*x1003);
IkReal x1014=((0.996199857775771)*x1005);
IkReal x1015=((0.0870967471696526)*x1008);
IkReal x1016=((0.996199857775771)*x1007);
IkReal x1017=(x1016+x1015+x1014);
IkReal x1018=(x1012+x1010+x1011);
evalcond[0]=((((-1.0)*x1017))+(((-1.0)*r22*x994))+((sj4*x999))+(((-1.0)*x1000*x997))+x1013);
evalcond[1]=(((sj4*x1001))+(((-1.0)*r12*x994))+(((-1.0)*x1009))+x1018+(((-1.0)*x997*x998)));
evalcond[2]=((((-0.0437395992633951)*x1008))+(((-8.826e-5)*x1000))+(((0.28240223039926)*sj1))+(((0.03861452)*cj1))+((r20*x996))+(((-1.0)*cj1*x1004))+(((0.0437395992633951)*x1003))+(((-1.0)*pz))+(((-0.247882444952069)*x1007)));
evalcond[3]=((((0.0437395992633951)*x1005))+(((0.0437395992633951)*x1007))+(((-0.28240223039926)*cj1))+(((-1.0)*sj1*x1004))+(((-8.826e-5)*x998))+(((-1.0)*py))+(((0.247882444952069)*x1003))+((r10*x996))+(((0.03861452)*sj1)));
evalcond[4]=(((r21*x1002))+((cj3*cj4*x1000))+x1009+((r20*x995))+(((-1.0)*cj3*r22*x997))+(((-1.0)*cj3*x994*x999))+(((-1.0)*x1018)));
evalcond[5]=(((r10*x995))+((r11*x1002))+(((-1.0)*cj3*x1001*x994))+(((-1.0)*x1017))+(((-1.0)*cj3*r12*x997))+((cj3*cj4*x998))+x1013);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1019=((1.0)*r21);
IkReal x1020=((1.0)*sj5);
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x1020))+(((-1.0)*cj5*x1019)))),IkReal((((cj4*cj5*r20))+((r22*sj4))+(((-1.0)*cj4*sj5*x1019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
CheckValue<IkReal> x1022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x1020))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)))),-1);
if(!x1022.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1021.value)+(((1.5707963267949)*(x1022.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x1023=IKsin(j3);
IkReal x1024=IKcos(j3);
IkReal x1025=(cj4*cj5);
IkReal x1026=(r02*sj4);
IkReal x1027=(cj5*r01);
IkReal x1028=(r00*sj5);
IkReal x1029=((1.0)*x1024);
IkReal x1030=((1.0)*x1023);
IkReal x1031=(cj4*sj5*x1023);
evalcond[0]=((((-1.0)*r00*x1025*x1029))+((cj4*r01*sj5*x1024))+(((-1.0)*x1026*x1029))+((x1023*x1027))+((x1023*x1028)));
evalcond[1]=((((-1.0)*r20*x1025*x1030))+(((-1.0)*cj5*r21*x1029))+((r21*x1031))+(((-1.0)*r20*sj5*x1029))+(((-1.0)*r22*sj4*x1030)));
evalcond[2]=(((r11*x1031))+(((-1.0)*r12*sj4*x1030))+(((-1.0)*r10*sj5*x1029))+(((-1.0)*cj5*r11*x1029))+(((-1.0)*r10*x1025*x1030)));
evalcond[3]=((-1.0)+((r01*x1031))+(((-1.0)*r00*x1025*x1030))+(((-1.0)*x1027*x1029))+(((-1.0)*x1026*x1030))+(((-1.0)*x1028*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1032=((0.263803535154934)*cj4);
IkReal x1033=(r21*sj5);
IkReal x1034=(cj4*r12);
IkReal x1035=(cj5*r10);
IkReal x1036=((0.263803535154934)*sj4);
IkReal x1037=(cj5*r20);
IkReal x1038=((0.0879345117183112)*sj4);
IkReal x1039=((1.00300013289883)*sj4);
IkReal x1040=(r11*sj5);
IkReal x1041=(cj4*r22);
IkReal x1042=((3.00900039869648)*sj4);
IkReal x1043=((0.00105912)*x1035);
IkReal x1044=((3.00900039869648)*x1034);
IkReal x1045=(r12*x1032);
IkReal x1046=((3.00900039869648)*x1041);
IkReal x1047=((0.00105912)*x1037);
IkReal x1048=(x1040*x1042);
IkReal x1049=(x1036*x1037);
IkReal x1050=(x1036*x1040);
IkReal x1051=(x1033*x1042);
IkReal x1052=(((x1035*x1036))+((x1037*x1042))+(((0.00105912)*x1033))+(((12.0)*pz)));
IkReal x1053=(x1048+x1044+x1049+x1043);
IkReal x1054=((((12.0)*py))+((x1035*x1042))+((x1033*x1036))+(((0.00105912)*x1040))+((r22*x1032)));
IkReal x1055=(x1051+x1047+x1045+x1050+x1046);
j1eval[0]=((10.2725360127763)+(IKabs(((-0.15445808)+(((0.0879345117183112)*x1034))+(((-1.0)*x1037*x1039))+((x1033*x1039))+(((-4.0)*pz))+(((-0.00035304)*x1033))+((x1038*x1040))+(((0.00035304)*x1037))+(((1.00300013289883)*x1041))+(((-1.0)*x1035*x1038)))))+(IKabs(((-1.12960892159704)+(((-1.0)*x1054))+x1053)))+(IKabs(((1.12960892159704)+(((1.00300013289883)*x1034))+(((-1.0)*x1033*x1038))+((x1037*x1038))+(((0.00035304)*x1035))+(((-0.0879345117183112)*x1041))+(((-1.0)*x1035*x1039))+(((-0.00035304)*x1040))+((x1039*x1040))+(((-4.0)*py)))))+(IKabs(((0.15445808)+x1055+(((-1.0)*x1052)))))+(IKabs(((1.12960892159704)+(((-1.0)*x1054))+x1053)))+(IKabs(((-0.15445808)+x1055+(((-1.0)*x1052))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1056=(r21*sj5);
IkReal x1057=((1.00300013289883)*sj4);
IkReal x1058=(cj4*r12);
IkReal x1059=((0.263803535154934)*sj4);
IkReal x1060=(r11*sj5);
IkReal x1061=(cj4*r22);
IkReal x1062=((3.00900039869648)*sj4);
IkReal x1063=(cj5*r20);
IkReal x1064=(cj5*r10);
IkReal x1065=((0.0879345117183112)*sj4);
IkReal x1066=((0.263803535154934)*x1058);
IkReal x1067=((3.00900039869648)*x1061);
IkReal x1068=((0.00105912)*x1063);
IkReal x1069=((1.00300013289883)*x1061);
IkReal x1070=((0.00035304)*x1063);
IkReal x1071=((0.0879345117183112)*x1058);
IkReal x1072=(x1059*x1060);
IkReal x1073=(x1056*x1062);
IkReal x1074=(x1056*x1057);
IkReal x1075=(x1060*x1065);
IkReal x1076=((((0.00105912)*x1056))+((x1059*x1064))+(((12.0)*pz))+((x1062*x1063)));
IkReal x1077=((((0.00035304)*x1056))+((x1064*x1065))+((x1057*x1063))+(((4.0)*pz)));
IkReal x1078=(x1069+x1074+x1071+x1070+x1075);
IkReal x1079=(x1066+x1073+x1067+x1068+x1072);
op[0]=((-0.15445808)+x1078+(((-1.0)*x1077)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+x1079+(((-1.0)*x1076)));
op[3]=4.51843568638817;
op[4]=((0.15445808)+x1079+(((-1.0)*x1076)));
op[5]=2.25921784319408;
op[6]=((0.15445808)+x1078+(((-1.0)*x1077)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x1080=(cj4*r22);
IkReal x1081=(cj5*r10);
IkReal x1082=(cj4*r12);
IkReal x1083=((0.0879345117183112)*sj4);
IkReal x1084=(cj5*r20);
IkReal x1085=(r21*sj5);
IkReal x1086=((0.263803535154934)*sj4);
IkReal x1087=((3.00900039869648)*sj4);
IkReal x1088=(r11*sj5);
IkReal x1089=((1.00300013289883)*sj4);
IkReal x1090=((0.00035304)*x1081);
IkReal x1091=((1.00300013289883)*x1082);
IkReal x1092=((0.00105912)*x1081);
IkReal x1093=((3.00900039869648)*x1082);
IkReal x1094=(x1083*x1084);
IkReal x1095=(x1088*x1089);
IkReal x1096=(x1087*x1088);
IkReal x1097=(x1084*x1086);
IkReal x1098=(x1097+x1092+x1096+x1093);
IkReal x1099=(x1094+x1090+x1095+x1091);
IkReal x1100=((((12.0)*py))+(((0.263803535154934)*x1080))+((x1085*x1086))+(((0.00105912)*x1088))+((x1081*x1087)));
IkReal x1101=((((0.0879345117183112)*x1080))+(((4.0)*py))+((x1081*x1089))+((x1083*x1085))+(((0.00035304)*x1088)));
j1evalpoly[0]=((-1.12960892159704)+(((0.30891616)*htj1))+(((0.61783232)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.12960892159704)+x1099+(((-1.0)*x1101))))))+(((htj1*htj1*htj1*htj1)*(((1.12960892159704)+(((-1.0)*x1100))+x1098))))+x1099+(((0.30891616)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.12960892159704)+(((-1.0)*x1100))+x1098))))+(((-1.0)*x1101)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1102=(cj5*r10);
IkReal x1103=((0.0870967471696526)*cj1);
IkReal x1104=(r11*sj5);
IkReal x1105=(cj4*r22);
IkReal x1106=(r21*sj5);
IkReal x1107=((0.996199857775771)*cj1);
IkReal x1108=(cj4*r12);
IkReal x1109=((0.0870967471696526)*sj1);
IkReal x1110=((0.996199857775771)*sj1);
IkReal x1111=(sj4*x1110);
IkReal x1112=(cj5*r20*sj4);
if( IKabs(((((-1.0)*sj4*x1102*x1103))+(((-1.0)*x1104*x1111))+((sj4*x1103*x1104))+(((-1.0)*x1105*x1107))+(((-1.0)*sj4*x1106*x1109))+(((-1.0)*sj4*x1106*x1107))+((x1107*x1112))+((x1103*x1108))+(((-1.0)*x1105*x1109))+((x1109*x1112))+(((-1.0)*x1108*x1110))+((x1102*x1111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x1102*x1107))+((sj4*x1104*x1107))+((x1108*x1109))+((sj4*x1103*x1106))+(((-1.0)*x1105*x1110))+((x1107*x1108))+(((-1.0)*x1103*x1112))+(((-1.0)*x1106*x1111))+((x1103*x1105))+(((-1.0)*sj4*x1102*x1109))+((sj4*x1104*x1109))+((cj5*r20*x1111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1102*x1103))+(((-1.0)*x1104*x1111))+((sj4*x1103*x1104))+(((-1.0)*x1105*x1107))+(((-1.0)*sj4*x1106*x1109))+(((-1.0)*sj4*x1106*x1107))+((x1107*x1112))+((x1103*x1108))+(((-1.0)*x1105*x1109))+((x1109*x1112))+(((-1.0)*x1108*x1110))+((x1102*x1111))))+IKsqr(((((-1.0)*sj4*x1102*x1107))+((sj4*x1104*x1107))+((x1108*x1109))+((sj4*x1103*x1106))+(((-1.0)*x1105*x1110))+((x1107*x1108))+(((-1.0)*x1103*x1112))+(((-1.0)*x1106*x1111))+((x1103*x1105))+(((-1.0)*sj4*x1102*x1109))+((sj4*x1104*x1109))+((cj5*r20*x1111))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x1102*x1103))+(((-1.0)*x1104*x1111))+((sj4*x1103*x1104))+(((-1.0)*x1105*x1107))+(((-1.0)*sj4*x1106*x1109))+(((-1.0)*sj4*x1106*x1107))+((x1107*x1112))+((x1103*x1108))+(((-1.0)*x1105*x1109))+((x1109*x1112))+(((-1.0)*x1108*x1110))+((x1102*x1111))), ((((-1.0)*sj4*x1102*x1107))+((sj4*x1104*x1107))+((x1108*x1109))+((sj4*x1103*x1106))+(((-1.0)*x1105*x1110))+((x1107*x1108))+(((-1.0)*x1103*x1112))+(((-1.0)*x1106*x1111))+((x1103*x1105))+(((-1.0)*sj4*x1102*x1109))+((sj4*x1104*x1109))+((cj5*r20*x1111))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x1113=IKsin(j2);
IkReal x1114=IKcos(j2);
IkReal x1115=((1.0)*cj4);
IkReal x1116=(sj3*sj5);
IkReal x1117=((8.826e-5)*cj5);
IkReal x1118=((1.0)*sj4);
IkReal x1119=(r11*sj5);
IkReal x1120=(cj5*r20);
IkReal x1121=(r21*sj5);
IkReal x1122=(cj5*r10);
IkReal x1123=(cj5*sj3);
IkReal x1124=(cj1*x1114);
IkReal x1125=((0.247882444952069)*x1113);
IkReal x1126=(cj1*x1113);
IkReal x1127=(cj3*cj4*sj5);
IkReal x1128=(sj1*x1114);
IkReal x1129=(sj1*x1113);
IkReal x1130=((0.996199857775771)*x1129);
IkReal x1131=((0.996199857775771)*x1124);
IkReal x1132=((0.0870967471696526)*x1126);
IkReal x1133=((0.0870967471696526)*x1128);
IkReal x1134=((0.0870967471696526)*x1124);
IkReal x1135=((0.996199857775771)*x1126);
IkReal x1136=((0.0870967471696526)*x1129);
IkReal x1137=((0.996199857775771)*x1128);
IkReal x1138=(x1135+x1137+x1136);
IkReal x1139=(x1131+x1133+x1132);
evalcond[0]=((((-1.0)*r22*x1115))+x1134+(((-1.0)*x1118*x1121))+((sj4*x1120))+(((-1.0)*x1138)));
evalcond[1]=((((-1.0)*x1130))+(((-1.0)*x1118*x1119))+x1139+(((-1.0)*r12*x1115))+((sj4*x1122)));
evalcond[2]=((((0.28240223039926)*sj1))+(((-0.0437395992633951)*x1129))+(((0.0437395992633951)*x1124))+(((-0.247882444952069)*x1128))+(((0.03861452)*cj1))+(((-8.826e-5)*x1121))+(((-1.0)*cj1*x1125))+((r20*x1117))+(((-1.0)*pz)));
evalcond[3]=((((0.247882444952069)*x1124))+((r10*x1117))+(((-1.0)*sj1*x1125))+(((-8.826e-5)*x1119))+(((-0.28240223039926)*cj1))+(((-1.0)*py))+(((0.0437395992633951)*x1128))+(((0.0437395992633951)*x1126))+(((0.03861452)*sj1)));
evalcond[4]=(x1130+((cj3*cj4*x1121))+(((-1.0)*cj3*r22*x1118))+((r21*x1123))+((r20*x1116))+(((-1.0)*cj3*x1115*x1120))+(((-1.0)*x1139)));
evalcond[5]=(((r11*x1123))+(((-1.0)*cj3*r12*x1118))+x1134+((cj3*cj4*x1119))+(((-1.0)*cj3*x1115*x1122))+((r10*x1116))+(((-1.0)*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1140=((1.0)*sj5);
IkReal x1141=((1.0)*cj5);
CheckValue<IkReal> x1142=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1141)))),-1);
if(!x1142.valid){
continue;
}
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1141))+(((-1.0)*r10*x1140)))),IkReal((((r12*sj4))+(((-1.0)*cj4*r11*x1140))+((cj4*cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1142.value)))+(x1143.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x1144=IKsin(j3);
IkReal x1145=IKcos(j3);
IkReal x1146=(cj4*cj5);
IkReal x1147=(r02*sj4);
IkReal x1148=(cj5*r01);
IkReal x1149=(r00*sj5);
IkReal x1150=((1.0)*x1145);
IkReal x1151=((1.0)*x1144);
IkReal x1152=(cj4*sj5*x1144);
evalcond[0]=(((x1144*x1149))+((x1144*x1148))+(((-1.0)*x1147*x1150))+(((-1.0)*r00*x1146*x1150))+((cj4*r01*sj5*x1145)));
evalcond[1]=((((-1.0)*r22*sj4*x1151))+(((-1.0)*cj5*r21*x1150))+(((-1.0)*r20*sj5*x1150))+(((-1.0)*r20*x1146*x1151))+((r21*x1152)));
evalcond[2]=(((r11*x1152))+(((-1.0)*r12*sj4*x1151))+(((-1.0)*r10*x1146*x1151))+(((-1.0)*r10*sj5*x1150))+(((-1.0)*cj5*r11*x1150)));
evalcond[3]=((-1.0)+(((-1.0)*x1148*x1150))+((r01*x1152))+(((-1.0)*x1147*x1151))+(((-1.0)*x1149*x1150))+(((-1.0)*r00*x1146*x1151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1153=((0.263803535154934)*cj4);
IkReal x1154=(r21*sj5);
IkReal x1155=(cj4*r12);
IkReal x1156=(cj5*r10);
IkReal x1157=((0.263803535154934)*sj4);
IkReal x1158=(cj5*r20);
IkReal x1159=((0.0879345117183112)*sj4);
IkReal x1160=((1.00300013289883)*sj4);
IkReal x1161=(r11*sj5);
IkReal x1162=(cj4*r22);
IkReal x1163=((3.00900039869648)*sj4);
IkReal x1164=((0.00105912)*x1156);
IkReal x1165=((3.00900039869648)*x1155);
IkReal x1166=(r12*x1153);
IkReal x1167=((3.00900039869648)*x1162);
IkReal x1168=((0.00105912)*x1158);
IkReal x1169=(x1161*x1163);
IkReal x1170=(x1157*x1158);
IkReal x1171=(x1157*x1161);
IkReal x1172=(x1154*x1163);
IkReal x1173=(((x1156*x1157))+(((0.00105912)*x1154))+((x1158*x1163))+(((12.0)*pz)));
IkReal x1174=(x1165+x1170+x1164+x1169);
IkReal x1175=((((12.0)*py))+((x1156*x1163))+((r22*x1153))+(((0.00105912)*x1161))+((x1154*x1157)));
IkReal x1176=(x1171+x1172+x1166+x1167+x1168);
j1eval[0]=((10.2725360127763)+(IKabs(((1.12960892159704)+((x1160*x1161))+(((1.00300013289883)*x1155))+(((-1.0)*x1154*x1159))+(((-0.00035304)*x1161))+(((-0.0879345117183112)*x1162))+(((-4.0)*py))+(((-1.0)*x1156*x1160))+((x1158*x1159))+(((0.00035304)*x1156)))))+(IKabs(((-1.12960892159704)+(((-1.0)*x1175))+x1174)))+(IKabs(((1.12960892159704)+(((-1.0)*x1175))+x1174)))+(IKabs(((-0.15445808)+x1176+(((-1.0)*x1173)))))+(IKabs(((-0.15445808)+(((-1.0)*x1158*x1160))+(((-0.00035304)*x1154))+(((-4.0)*pz))+(((-1.0)*x1156*x1159))+(((0.00035304)*x1158))+((x1159*x1161))+(((1.00300013289883)*x1162))+((x1154*x1160))+(((0.0879345117183112)*x1155)))))+(IKabs(((0.15445808)+x1176+(((-1.0)*x1173))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1177=(r21*sj5);
IkReal x1178=((1.00300013289883)*sj4);
IkReal x1179=(cj4*r12);
IkReal x1180=((0.263803535154934)*sj4);
IkReal x1181=(r11*sj5);
IkReal x1182=(cj4*r22);
IkReal x1183=((3.00900039869648)*sj4);
IkReal x1184=(cj5*r20);
IkReal x1185=(cj5*r10);
IkReal x1186=((0.0879345117183112)*sj4);
IkReal x1187=((0.263803535154934)*x1179);
IkReal x1188=((3.00900039869648)*x1182);
IkReal x1189=((0.00105912)*x1184);
IkReal x1190=((1.00300013289883)*x1182);
IkReal x1191=((0.00035304)*x1184);
IkReal x1192=((0.0879345117183112)*x1179);
IkReal x1193=(x1180*x1181);
IkReal x1194=(x1177*x1183);
IkReal x1195=(x1177*x1178);
IkReal x1196=(x1181*x1186);
IkReal x1197=(((x1183*x1184))+((x1180*x1185))+(((0.00105912)*x1177))+(((12.0)*pz)));
IkReal x1198=(((x1185*x1186))+(((0.00035304)*x1177))+((x1178*x1184))+(((4.0)*pz)));
IkReal x1199=(x1190+x1191+x1196+x1192+x1195);
IkReal x1200=(x1193+x1188+x1194+x1187+x1189);
op[0]=((-0.15445808)+(((-1.0)*x1198))+x1199);
op[1]=2.25921784319408;
op[2]=((-0.15445808)+x1200+(((-1.0)*x1197)));
op[3]=4.51843568638817;
op[4]=((0.15445808)+x1200+(((-1.0)*x1197)));
op[5]=2.25921784319408;
op[6]=((0.15445808)+(((-1.0)*x1198))+x1199);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x1201=(cj4*r22);
IkReal x1202=(cj5*r10);
IkReal x1203=(cj4*r12);
IkReal x1204=((0.0879345117183112)*sj4);
IkReal x1205=(cj5*r20);
IkReal x1206=(r21*sj5);
IkReal x1207=((0.263803535154934)*sj4);
IkReal x1208=((3.00900039869648)*sj4);
IkReal x1209=(r11*sj5);
IkReal x1210=((1.00300013289883)*sj4);
IkReal x1211=((0.00035304)*x1202);
IkReal x1212=((1.00300013289883)*x1203);
IkReal x1213=((0.00105912)*x1202);
IkReal x1214=((3.00900039869648)*x1203);
IkReal x1215=(x1204*x1205);
IkReal x1216=(x1209*x1210);
IkReal x1217=(x1208*x1209);
IkReal x1218=(x1205*x1207);
IkReal x1219=(x1213+x1214+x1217+x1218);
IkReal x1220=(x1211+x1215+x1212+x1216);
IkReal x1221=((((12.0)*py))+(((0.00105912)*x1209))+(((0.263803535154934)*x1201))+((x1206*x1207))+((x1202*x1208)));
IkReal x1222=((((4.0)*py))+((x1202*x1210))+((x1204*x1206))+(((0.00035304)*x1209))+(((0.0879345117183112)*x1201)));
j1evalpoly[0]=((-1.12960892159704)+(((0.30891616)*htj1))+(((-1.0)*x1222))+(((0.61783232)*(htj1*htj1*htj1)))+x1220+(((htj1*htj1)*(((-1.12960892159704)+x1219+(((-1.0)*x1221))))))+(((0.30891616)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.12960892159704)+(((-1.0)*x1222))+x1220))))+(((htj1*htj1*htj1*htj1)*(((1.12960892159704)+x1219+(((-1.0)*x1221)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1223=(cj5*r10);
IkReal x1224=((0.0870967471696526)*cj1);
IkReal x1225=(r11*sj5);
IkReal x1226=(cj4*r22);
IkReal x1227=(r21*sj5);
IkReal x1228=((0.996199857775771)*cj1);
IkReal x1229=(cj4*r12);
IkReal x1230=((0.0870967471696526)*sj1);
IkReal x1231=((0.996199857775771)*sj1);
IkReal x1232=(sj4*x1231);
IkReal x1233=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1229*x1231))+((sj4*x1224*x1225))+(((-1.0)*x1225*x1232))+(((-1.0)*x1226*x1228))+((x1223*x1232))+((x1230*x1233))+((x1228*x1233))+((x1224*x1229))+(((-1.0)*sj4*x1223*x1224))+(((-1.0)*sj4*x1227*x1228))+(((-1.0)*sj4*x1227*x1230))+(((-1.0)*x1226*x1230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1227*x1232))+((sj4*x1225*x1230))+(((-1.0)*sj4*x1223*x1228))+((sj4*x1225*x1228))+((sj4*x1224*x1227))+((x1229*x1230))+(((-1.0)*x1224*x1233))+(((-1.0)*sj4*x1223*x1230))+((x1228*x1229))+(((-1.0)*x1226*x1231))+((cj5*r20*x1232))+((x1224*x1226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1229*x1231))+((sj4*x1224*x1225))+(((-1.0)*x1225*x1232))+(((-1.0)*x1226*x1228))+((x1223*x1232))+((x1230*x1233))+((x1228*x1233))+((x1224*x1229))+(((-1.0)*sj4*x1223*x1224))+(((-1.0)*sj4*x1227*x1228))+(((-1.0)*sj4*x1227*x1230))+(((-1.0)*x1226*x1230))))+IKsqr(((((-1.0)*x1227*x1232))+((sj4*x1225*x1230))+(((-1.0)*sj4*x1223*x1228))+((sj4*x1225*x1228))+((sj4*x1224*x1227))+((x1229*x1230))+(((-1.0)*x1224*x1233))+(((-1.0)*sj4*x1223*x1230))+((x1228*x1229))+(((-1.0)*x1226*x1231))+((cj5*r20*x1232))+((x1224*x1226))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1229*x1231))+((sj4*x1224*x1225))+(((-1.0)*x1225*x1232))+(((-1.0)*x1226*x1228))+((x1223*x1232))+((x1230*x1233))+((x1228*x1233))+((x1224*x1229))+(((-1.0)*sj4*x1223*x1224))+(((-1.0)*sj4*x1227*x1228))+(((-1.0)*sj4*x1227*x1230))+(((-1.0)*x1226*x1230))), ((((-1.0)*x1227*x1232))+((sj4*x1225*x1230))+(((-1.0)*sj4*x1223*x1228))+((sj4*x1225*x1228))+((sj4*x1224*x1227))+((x1229*x1230))+(((-1.0)*x1224*x1233))+(((-1.0)*sj4*x1223*x1230))+((x1228*x1229))+(((-1.0)*x1226*x1231))+((cj5*r20*x1232))+((x1224*x1226))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x1234=IKsin(j2);
IkReal x1235=IKcos(j2);
IkReal x1236=((1.0)*cj4);
IkReal x1237=(sj3*sj5);
IkReal x1238=((8.826e-5)*cj5);
IkReal x1239=((1.0)*sj4);
IkReal x1240=(r11*sj5);
IkReal x1241=(cj5*r20);
IkReal x1242=(r21*sj5);
IkReal x1243=(cj5*r10);
IkReal x1244=(cj5*sj3);
IkReal x1245=(cj1*x1235);
IkReal x1246=((0.247882444952069)*x1234);
IkReal x1247=(cj1*x1234);
IkReal x1248=(cj3*cj4*sj5);
IkReal x1249=(sj1*x1235);
IkReal x1250=(sj1*x1234);
IkReal x1251=((0.996199857775771)*x1250);
IkReal x1252=((0.996199857775771)*x1245);
IkReal x1253=((0.0870967471696526)*x1247);
IkReal x1254=((0.0870967471696526)*x1249);
IkReal x1255=((0.0870967471696526)*x1245);
IkReal x1256=((0.996199857775771)*x1247);
IkReal x1257=((0.0870967471696526)*x1250);
IkReal x1258=((0.996199857775771)*x1249);
IkReal x1259=(x1256+x1258+x1257);
IkReal x1260=(x1254+x1252+x1253);
evalcond[0]=(((sj4*x1241))+(((-1.0)*r22*x1236))+x1255+(((-1.0)*x1259))+(((-1.0)*x1239*x1242)));
evalcond[1]=(((sj4*x1243))+(((-1.0)*x1251))+(((-1.0)*x1239*x1240))+(((-1.0)*r12*x1236))+x1260);
evalcond[2]=((((0.0437395992633951)*x1245))+(((-8.826e-5)*x1242))+((r20*x1238))+(((0.28240223039926)*sj1))+(((0.03861452)*cj1))+(((-0.247882444952069)*x1249))+(((-0.0437395992633951)*x1250))+(((-1.0)*cj1*x1246))+(((-1.0)*pz)));
evalcond[3]=((((0.0437395992633951)*x1249))+(((-0.28240223039926)*cj1))+(((-8.826e-5)*x1240))+(((-1.0)*sj1*x1246))+(((-1.0)*py))+((r10*x1238))+(((0.247882444952069)*x1245))+(((0.0437395992633951)*x1247))+(((0.03861452)*sj1)));
evalcond[4]=(((r21*x1244))+x1251+(((-1.0)*x1260))+((cj3*cj4*x1242))+(((-1.0)*cj3*x1236*x1241))+((r20*x1237))+(((-1.0)*cj3*r22*x1239)));
evalcond[5]=(((r11*x1244))+x1255+(((-1.0)*x1259))+((cj3*cj4*x1240))+(((-1.0)*cj3*x1236*x1243))+((r10*x1237))+(((-1.0)*cj3*r12*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1261=((1.0)*cj5);
IkReal x1262=((1.0)*sj5);
IkReal x1263=(((cj4*r12))+((r11*sj4*sj5))+(((-1.0)*r10*sj4*x1261)));
j3eval[0]=x1263;
j3eval[1]=((IKabs(((((-1.0)*r21*x1261))+(((-1.0)*r20*x1262)))))+(IKabs((((cj4*cj5*r20))+(((-1.0)*cj4*r21*x1262))+((r22*sj4))))));
j3eval[2]=IKsign(x1263);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1264=((1.0)*sj5);
IkReal x1265=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1264)));
j3eval[0]=x1265;
j3eval[1]=IKsign(x1265);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1264)))))+(IKabs((((r12*sj4))+(((-1.0)*cj4*r11*x1264))+((cj4*cj5*r10))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1266=cj4*cj4;
IkReal x1267=cj5*cj5;
IkReal x1268=r01*r01;
IkReal x1269=r00*r00;
IkReal x1270=r02*r02;
IkReal x1271=(r01*sj5);
IkReal x1272=((1.0)*cj5);
IkReal x1273=(r02*sj4);
IkReal x1274=((1.0)*x1268);
IkReal x1275=((2.0)*cj5*r00);
IkReal x1276=(x1267*x1269);
IkReal x1277=((((-1.0)*x1270))+(((2.0)*cj4*x1271*x1273))+(((-1.0)*x1267*x1274))+((x1266*x1271*x1275))+(((-1.0)*cj4*x1273*x1275))+(((-1.0)*x1266*x1274))+(((-1.0)*x1269))+x1276+((x1266*x1267*x1268))+(((-1.0)*x1271*x1275))+((x1266*x1270))+(((-1.0)*x1266*x1276)));
j3eval[0]=x1277;
j3eval[1]=IKsign(x1277);
j3eval[2]=((IKabs(((((-1.0)*r01*x1272))+(((-1.0)*r00*sj5)))))+(IKabs((((cj4*x1271))+(((-1.0)*cj4*r00*x1272))+(((-1.0)*x1273))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1278=cj4*cj4;
IkReal x1279=cj5*cj5;
IkReal x1280=r01*r01;
IkReal x1281=r00*r00;
IkReal x1282=r02*r02;
IkReal x1283=(r01*sj5);
IkReal x1284=((1.0)*cj5);
IkReal x1285=(r02*sj4);
IkReal x1286=((1.0)*x1280);
IkReal x1287=((2.0)*cj5*r00);
IkReal x1288=(x1279*x1281);
CheckValue<IkReal> x1289 = IKatan2WithCheck(IkReal((((cj4*x1283))+(((-1.0)*cj4*r00*x1284))+(((-1.0)*x1285)))),IkReal(((((-1.0)*r01*x1284))+(((-1.0)*r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1289.valid){
continue;
}
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(IKsign((((x1278*x1279*x1280))+(((-1.0)*x1279*x1286))+(((-1.0)*x1278*x1288))+(((-1.0)*x1282))+(((-1.0)*cj4*x1285*x1287))+(((-1.0)*x1283*x1287))+x1288+(((-1.0)*x1278*x1286))+(((2.0)*cj4*x1283*x1285))+((x1278*x1282))+((x1278*x1283*x1287))+(((-1.0)*x1281)))),-1);
if(!x1290.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1289.value)+(((1.5707963267949)*(x1290.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x1291=IKsin(j3);
IkReal x1292=IKcos(j3);
IkReal x1293=(cj4*cj5);
IkReal x1294=(r02*sj4);
IkReal x1295=(cj5*r01);
IkReal x1296=(r00*sj5);
IkReal x1297=((1.0)*x1292);
IkReal x1298=((1.0)*x1291);
IkReal x1299=(cj4*sj5*x1291);
evalcond[0]=((((-1.0)*r00*x1293*x1297))+((x1291*x1295))+((x1291*x1296))+((cj4*r01*sj5*x1292))+(((-1.0)*x1294*x1297)));
evalcond[1]=((((-1.0)*r22*sj4*x1298))+(((-1.0)*cj5*r21*x1297))+(((-1.0)*r20*sj5*x1297))+(((-1.0)*r20*x1293*x1298))+((r21*x1299)));
evalcond[2]=((((-1.0)*r10*sj5*x1297))+(((-1.0)*cj5*r11*x1297))+(((-1.0)*r12*sj4*x1298))+((r11*x1299))+(((-1.0)*r10*x1293*x1298)));
evalcond[3]=((1.0)+(((-1.0)*r00*x1293*x1298))+((r01*x1299))+(((-1.0)*x1296*x1297))+(((-1.0)*x1295*x1297))+(((-1.0)*x1294*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1300=(r21*sj5);
IkReal x1301=(cj3*cj4);
IkReal x1302=(cj5*r20);
IkReal x1303=((0.0879345117183112)*sj3);
IkReal x1304=(r20*sj5);
IkReal x1305=((1.00300013289883)*sj4);
IkReal x1306=(cj4*r22);
IkReal x1307=(cj5*r21);
IkReal x1308=((0.263803535154934)*sj3);
IkReal x1309=((3.00900039869648)*sj4);
IkReal x1310=((3.00900039869648)*x1306);
IkReal x1311=((0.00105912)*x1302);
IkReal x1312=(cj3*r22*sj4);
IkReal x1313=(x1307*x1308);
IkReal x1314=(x1304*x1308);
IkReal x1315=(x1300*x1309);
IkReal x1316=((0.263803535154934)*x1300*x1301);
IkReal x1317=(((x1302*x1309))+(((0.263803535154934)*x1301*x1302))+(((0.00105912)*x1300))+(((0.263803535154934)*x1312))+(((12.0)*pz)));
IkReal x1318=(x1313+x1310+x1315+x1316+x1311+x1314);
j1eval[0]=((9.03687137277633)+(IKabs(((-0.15445808)+((x1303*x1304))+((x1303*x1307))+(((-0.00035304)*x1300))+(((-1.0)*x1302*x1305))+(((-0.0879345117183112)*x1301*x1302))+(((1.00300013289883)*x1306))+(((0.0879345117183112)*x1300*x1301))+(((-4.0)*pz))+((x1300*x1305))+(((-0.0879345117183112)*x1312))+(((0.00035304)*x1302)))))+(IKabs(((-0.15445808)+(((-1.0)*x1317))+x1318)))+(IKabs(((0.15445808)+(((-1.0)*x1317))+x1318))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x1319=(r21*sj5);
IkReal x1320=(cj3*cj4);
IkReal x1321=(cj5*r20);
IkReal x1322=((0.0879345117183112)*sj3);
IkReal x1323=(r20*sj5);
IkReal x1324=((1.00300013289883)*sj4);
IkReal x1325=(cj4*r22);
IkReal x1326=(cj5*r21);
IkReal x1327=((0.263803535154934)*sj3);
IkReal x1328=((3.00900039869648)*sj4);
IkReal x1329=((3.00900039869648)*x1325);
IkReal x1330=((0.00105912)*x1321);
IkReal x1331=((1.00300013289883)*x1325);
IkReal x1332=((0.00035304)*x1321);
IkReal x1333=(cj3*r22*sj4);
IkReal x1334=(x1326*x1327);
IkReal x1335=(x1323*x1327);
IkReal x1336=(x1319*x1328);
IkReal x1337=(x1322*x1323);
IkReal x1338=(x1319*x1324);
IkReal x1339=(x1322*x1326);
IkReal x1340=((0.263803535154934)*x1319*x1320);
IkReal x1341=((0.0879345117183112)*x1319*x1320);
IkReal x1342=((((0.263803535154934)*x1333))+(((0.00105912)*x1319))+(((0.263803535154934)*x1320*x1321))+((x1321*x1328))+(((12.0)*pz)));
IkReal x1343=((((0.0879345117183112)*x1320*x1321))+((x1321*x1324))+(((0.0879345117183112)*x1333))+(((0.00035304)*x1319))+(((4.0)*pz)));
IkReal x1344=(x1330+x1329+x1335+x1340+x1336+x1334);
IkReal x1345=(x1337+x1332+x1339+x1338+x1331+x1341);
op[0]=((-0.15445808)+(((-1.0)*x1343))+x1345);
op[1]=2.25921784319408;
op[2]=((-0.15445808)+(((-1.0)*x1342))+x1344);
op[3]=4.51843568638817;
op[4]=((0.15445808)+(((-1.0)*x1342))+x1344);
op[5]=2.25921784319408;
op[6]=((0.15445808)+(((-1.0)*x1343))+x1345);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1346=(cj5*r10);
IkReal x1347=((0.0870967471696526)*cj1);
IkReal x1348=(r11*sj5);
IkReal x1349=(cj4*r22);
IkReal x1350=(r21*sj5);
IkReal x1351=((0.996199857775771)*cj1);
IkReal x1352=((0.0870967471696526)*sj1);
IkReal x1353=(cj4*r12);
IkReal x1354=((0.996199857775771)*sj1);
IkReal x1355=(sj4*x1354);
IkReal x1356=(cj5*r20*sj4);
if( IKabs((((x1348*x1355))+((x1352*x1356))+(((-1.0)*x1349*x1352))+(((-1.0)*sj4*x1347*x1348))+((sj4*x1346*x1347))+(((-1.0)*x1347*x1353))+(((-1.0)*x1349*x1351))+(((-1.0)*x1346*x1355))+(((-1.0)*sj4*x1350*x1352))+((x1353*x1354))+((x1351*x1356))+(((-1.0)*sj4*x1350*x1351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x1347*x1350))+((sj4*x1346*x1352))+(((-1.0)*x1350*x1355))+((x1347*x1349))+(((-1.0)*sj4*x1348*x1352))+((sj4*x1346*x1351))+(((-1.0)*sj4*x1348*x1351))+(((-1.0)*x1352*x1353))+(((-1.0)*x1347*x1356))+(((-1.0)*x1349*x1354))+((cj5*r20*x1355))+(((-1.0)*x1351*x1353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1348*x1355))+((x1352*x1356))+(((-1.0)*x1349*x1352))+(((-1.0)*sj4*x1347*x1348))+((sj4*x1346*x1347))+(((-1.0)*x1347*x1353))+(((-1.0)*x1349*x1351))+(((-1.0)*x1346*x1355))+(((-1.0)*sj4*x1350*x1352))+((x1353*x1354))+((x1351*x1356))+(((-1.0)*sj4*x1350*x1351))))+IKsqr((((sj4*x1347*x1350))+((sj4*x1346*x1352))+(((-1.0)*x1350*x1355))+((x1347*x1349))+(((-1.0)*sj4*x1348*x1352))+((sj4*x1346*x1351))+(((-1.0)*sj4*x1348*x1351))+(((-1.0)*x1352*x1353))+(((-1.0)*x1347*x1356))+(((-1.0)*x1349*x1354))+((cj5*r20*x1355))+(((-1.0)*x1351*x1353))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1348*x1355))+((x1352*x1356))+(((-1.0)*x1349*x1352))+(((-1.0)*sj4*x1347*x1348))+((sj4*x1346*x1347))+(((-1.0)*x1347*x1353))+(((-1.0)*x1349*x1351))+(((-1.0)*x1346*x1355))+(((-1.0)*sj4*x1350*x1352))+((x1353*x1354))+((x1351*x1356))+(((-1.0)*sj4*x1350*x1351))), (((sj4*x1347*x1350))+((sj4*x1346*x1352))+(((-1.0)*x1350*x1355))+((x1347*x1349))+(((-1.0)*sj4*x1348*x1352))+((sj4*x1346*x1351))+(((-1.0)*sj4*x1348*x1351))+(((-1.0)*x1352*x1353))+(((-1.0)*x1347*x1356))+(((-1.0)*x1349*x1354))+((cj5*r20*x1355))+(((-1.0)*x1351*x1353))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x1357=IKsin(j2);
IkReal x1358=IKcos(j2);
IkReal x1359=((1.0)*cj4);
IkReal x1360=(sj3*sj5);
IkReal x1361=((8.826e-5)*cj5);
IkReal x1362=((1.0)*sj4);
IkReal x1363=(r11*sj5);
IkReal x1364=(cj5*r20);
IkReal x1365=(r21*sj5);
IkReal x1366=(cj5*r10);
IkReal x1367=(cj5*sj3);
IkReal x1368=(cj1*x1358);
IkReal x1369=((0.247882444952069)*x1357);
IkReal x1370=(cj1*x1357);
IkReal x1371=(cj3*cj4*sj5);
IkReal x1372=(sj1*x1358);
IkReal x1373=(sj1*x1357);
IkReal x1374=((0.996199857775771)*x1373);
IkReal x1375=((0.996199857775771)*x1368);
IkReal x1376=((0.0870967471696526)*x1370);
IkReal x1377=((0.0870967471696526)*x1372);
IkReal x1378=((0.996199857775771)*x1370);
IkReal x1379=((0.0870967471696526)*x1373);
IkReal x1380=((0.996199857775771)*x1372);
IkReal x1381=((0.0870967471696526)*x1368);
IkReal x1382=(x1376+x1377+x1375);
IkReal x1383=(x1378+x1380+x1379);
evalcond[0]=((((-1.0)*x1362*x1365))+((sj4*x1364))+(((-1.0)*r22*x1359))+x1381+(((-1.0)*x1383)));
evalcond[1]=(x1374+((sj4*x1366))+(((-1.0)*x1382))+(((-1.0)*r12*x1359))+(((-1.0)*x1362*x1363)));
evalcond[2]=((((-1.0)*cj1*x1369))+(((-8.826e-5)*x1365))+(((0.28240223039926)*sj1))+(((0.03861452)*cj1))+((r20*x1361))+(((0.0437395992633951)*x1368))+(((-0.0437395992633951)*x1373))+(((-0.247882444952069)*x1372))+(((-1.0)*pz)));
evalcond[3]=((((-8.826e-5)*x1363))+(((0.28240223039926)*cj1))+(((-0.0437395992633951)*x1372))+(((-1.0)*py))+(((-0.03861452)*sj1))+((sj1*x1369))+(((-0.0437395992633951)*x1370))+(((-0.247882444952069)*x1368))+((r10*x1361)));
evalcond[4]=(x1374+(((-1.0)*cj3*x1359*x1364))+(((-1.0)*x1382))+((r20*x1360))+((r21*x1367))+(((-1.0)*cj3*r22*x1362))+((cj3*cj4*x1365)));
evalcond[5]=((((-1.0)*x1381))+x1383+(((-1.0)*cj3*x1359*x1366))+((cj3*cj4*x1363))+(((-1.0)*cj3*r12*x1362))+((r10*x1360))+((r11*x1367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1384=((1.0)*sj5);
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1384)))),-1);
if(!x1385.valid){
continue;
}
CheckValue<IkReal> x1386 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1384)))),IkReal((((r12*sj4))+(((-1.0)*cj4*r11*x1384))+((cj4*cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1386.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1385.value)))+(x1386.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x1387=IKsin(j3);
IkReal x1388=IKcos(j3);
IkReal x1389=(cj4*cj5);
IkReal x1390=(r02*sj4);
IkReal x1391=(cj5*r01);
IkReal x1392=(r00*sj5);
IkReal x1393=((1.0)*x1388);
IkReal x1394=((1.0)*x1387);
IkReal x1395=(cj4*sj5*x1387);
evalcond[0]=(((x1387*x1392))+((cj4*r01*sj5*x1388))+(((-1.0)*r00*x1389*x1393))+((x1387*x1391))+(((-1.0)*x1390*x1393)));
evalcond[1]=((((-1.0)*r20*x1389*x1394))+(((-1.0)*r20*sj5*x1393))+(((-1.0)*cj5*r21*x1393))+(((-1.0)*r22*sj4*x1394))+((r21*x1395)));
evalcond[2]=((((-1.0)*r12*sj4*x1394))+((r11*x1395))+(((-1.0)*r10*sj5*x1393))+(((-1.0)*cj5*r11*x1393))+(((-1.0)*r10*x1389*x1394)));
evalcond[3]=((1.0)+(((-1.0)*x1390*x1394))+(((-1.0)*x1392*x1393))+(((-1.0)*x1391*x1393))+(((-1.0)*r00*x1389*x1394))+((r01*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1396=(r21*sj5);
IkReal x1397=(cj3*cj4);
IkReal x1398=(cj5*r20);
IkReal x1399=((0.0879345117183112)*sj3);
IkReal x1400=(r20*sj5);
IkReal x1401=((1.00300013289883)*sj4);
IkReal x1402=(cj4*r22);
IkReal x1403=(cj5*r21);
IkReal x1404=((0.263803535154934)*sj3);
IkReal x1405=((3.00900039869648)*sj4);
IkReal x1406=((3.00900039869648)*x1402);
IkReal x1407=((0.00105912)*x1398);
IkReal x1408=(cj3*r22*sj4);
IkReal x1409=(x1403*x1404);
IkReal x1410=(x1400*x1404);
IkReal x1411=(x1396*x1405);
IkReal x1412=((0.263803535154934)*x1396*x1397);
IkReal x1413=((((0.263803535154934)*x1408))+(((12.0)*pz))+(((0.00105912)*x1396))+(((0.263803535154934)*x1397*x1398))+((x1398*x1405)));
IkReal x1414=(x1406+x1412+x1411+x1409+x1407+x1410);
j1eval[0]=((9.03687137277633)+(IKabs(((-0.15445808)+((x1399*x1403))+(((0.0879345117183112)*x1396*x1397))+(((0.00035304)*x1398))+(((-0.0879345117183112)*x1397*x1398))+((x1399*x1400))+(((-4.0)*pz))+(((-1.0)*x1398*x1401))+((x1396*x1401))+(((-0.00035304)*x1396))+(((1.00300013289883)*x1402))+(((-0.0879345117183112)*x1408)))))+(IKabs(((-0.15445808)+(((-1.0)*x1413))+x1414)))+(IKabs(((0.15445808)+(((-1.0)*x1413))+x1414))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x1415=(r21*sj5);
IkReal x1416=(cj3*cj4);
IkReal x1417=(cj5*r20);
IkReal x1418=((0.0879345117183112)*sj3);
IkReal x1419=(r20*sj5);
IkReal x1420=((1.00300013289883)*sj4);
IkReal x1421=(cj4*r22);
IkReal x1422=(cj5*r21);
IkReal x1423=((0.263803535154934)*sj3);
IkReal x1424=((3.00900039869648)*sj4);
IkReal x1425=((3.00900039869648)*x1421);
IkReal x1426=((0.00105912)*x1417);
IkReal x1427=((1.00300013289883)*x1421);
IkReal x1428=((0.00035304)*x1417);
IkReal x1429=(cj3*r22*sj4);
IkReal x1430=(x1422*x1423);
IkReal x1431=(x1419*x1423);
IkReal x1432=(x1415*x1424);
IkReal x1433=(x1418*x1419);
IkReal x1434=(x1415*x1420);
IkReal x1435=(x1418*x1422);
IkReal x1436=((0.263803535154934)*x1415*x1416);
IkReal x1437=((0.0879345117183112)*x1415*x1416);
IkReal x1438=((((0.263803535154934)*x1429))+(((0.263803535154934)*x1416*x1417))+(((12.0)*pz))+((x1417*x1424))+(((0.00105912)*x1415)));
IkReal x1439=((((0.00035304)*x1415))+((x1417*x1420))+(((0.0879345117183112)*x1416*x1417))+(((0.0879345117183112)*x1429))+(((4.0)*pz)));
IkReal x1440=(x1432+x1425+x1431+x1430+x1426+x1436);
IkReal x1441=(x1435+x1428+x1427+x1437+x1434+x1433);
op[0]=((-0.15445808)+x1441+(((-1.0)*x1439)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+x1440+(((-1.0)*x1438)));
op[3]=4.51843568638817;
op[4]=((0.15445808)+x1440+(((-1.0)*x1438)));
op[5]=2.25921784319408;
op[6]=((0.15445808)+x1441+(((-1.0)*x1439)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1442=(cj5*r10);
IkReal x1443=((0.0870967471696526)*cj1);
IkReal x1444=(r11*sj5);
IkReal x1445=(cj4*r22);
IkReal x1446=(r21*sj5);
IkReal x1447=((0.996199857775771)*cj1);
IkReal x1448=((0.0870967471696526)*sj1);
IkReal x1449=(cj4*r12);
IkReal x1450=((0.996199857775771)*sj1);
IkReal x1451=(sj4*x1450);
IkReal x1452=(cj5*r20*sj4);
if( IKabs((((sj4*x1442*x1443))+(((-1.0)*sj4*x1446*x1448))+((x1447*x1452))+((x1449*x1450))+(((-1.0)*x1442*x1451))+(((-1.0)*sj4*x1446*x1447))+((x1444*x1451))+(((-1.0)*x1445*x1448))+(((-1.0)*x1445*x1447))+(((-1.0)*x1443*x1449))+((x1448*x1452))+(((-1.0)*sj4*x1443*x1444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1447*x1449))+(((-1.0)*sj4*x1444*x1448))+((x1443*x1445))+(((-1.0)*x1445*x1450))+((sj4*x1442*x1448))+(((-1.0)*x1448*x1449))+(((-1.0)*sj4*x1444*x1447))+(((-1.0)*x1446*x1451))+((sj4*x1443*x1446))+(((-1.0)*x1443*x1452))+((sj4*x1442*x1447))+((cj5*r20*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1442*x1443))+(((-1.0)*sj4*x1446*x1448))+((x1447*x1452))+((x1449*x1450))+(((-1.0)*x1442*x1451))+(((-1.0)*sj4*x1446*x1447))+((x1444*x1451))+(((-1.0)*x1445*x1448))+(((-1.0)*x1445*x1447))+(((-1.0)*x1443*x1449))+((x1448*x1452))+(((-1.0)*sj4*x1443*x1444))))+IKsqr(((((-1.0)*x1447*x1449))+(((-1.0)*sj4*x1444*x1448))+((x1443*x1445))+(((-1.0)*x1445*x1450))+((sj4*x1442*x1448))+(((-1.0)*x1448*x1449))+(((-1.0)*sj4*x1444*x1447))+(((-1.0)*x1446*x1451))+((sj4*x1443*x1446))+(((-1.0)*x1443*x1452))+((sj4*x1442*x1447))+((cj5*r20*x1451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x1442*x1443))+(((-1.0)*sj4*x1446*x1448))+((x1447*x1452))+((x1449*x1450))+(((-1.0)*x1442*x1451))+(((-1.0)*sj4*x1446*x1447))+((x1444*x1451))+(((-1.0)*x1445*x1448))+(((-1.0)*x1445*x1447))+(((-1.0)*x1443*x1449))+((x1448*x1452))+(((-1.0)*sj4*x1443*x1444))), ((((-1.0)*x1447*x1449))+(((-1.0)*sj4*x1444*x1448))+((x1443*x1445))+(((-1.0)*x1445*x1450))+((sj4*x1442*x1448))+(((-1.0)*x1448*x1449))+(((-1.0)*sj4*x1444*x1447))+(((-1.0)*x1446*x1451))+((sj4*x1443*x1446))+(((-1.0)*x1443*x1452))+((sj4*x1442*x1447))+((cj5*r20*x1451))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x1453=IKsin(j2);
IkReal x1454=IKcos(j2);
IkReal x1455=((1.0)*cj4);
IkReal x1456=(sj3*sj5);
IkReal x1457=((8.826e-5)*cj5);
IkReal x1458=((1.0)*sj4);
IkReal x1459=(r11*sj5);
IkReal x1460=(cj5*r20);
IkReal x1461=(r21*sj5);
IkReal x1462=(cj5*r10);
IkReal x1463=(cj5*sj3);
IkReal x1464=(cj1*x1454);
IkReal x1465=((0.247882444952069)*x1453);
IkReal x1466=(cj1*x1453);
IkReal x1467=(cj3*cj4*sj5);
IkReal x1468=(sj1*x1454);
IkReal x1469=(sj1*x1453);
IkReal x1470=((0.996199857775771)*x1469);
IkReal x1471=((0.996199857775771)*x1464);
IkReal x1472=((0.0870967471696526)*x1466);
IkReal x1473=((0.0870967471696526)*x1468);
IkReal x1474=((0.996199857775771)*x1466);
IkReal x1475=((0.0870967471696526)*x1469);
IkReal x1476=((0.996199857775771)*x1468);
IkReal x1477=((0.0870967471696526)*x1464);
IkReal x1478=(x1471+x1473+x1472);
IkReal x1479=(x1474+x1476+x1475);
evalcond[0]=(x1477+((sj4*x1460))+(((-1.0)*x1479))+(((-1.0)*r22*x1455))+(((-1.0)*x1458*x1461)));
evalcond[1]=(((sj4*x1462))+(((-1.0)*x1458*x1459))+(((-1.0)*x1478))+x1470+(((-1.0)*r12*x1455)));
evalcond[2]=((((-1.0)*cj1*x1465))+(((0.0437395992633951)*x1464))+((r20*x1457))+(((-0.0437395992633951)*x1469))+(((0.28240223039926)*sj1))+(((0.03861452)*cj1))+(((-8.826e-5)*x1461))+(((-0.247882444952069)*x1468))+(((-1.0)*pz)));
evalcond[3]=((((-0.0437395992633951)*x1468))+(((0.28240223039926)*cj1))+(((-8.826e-5)*x1459))+(((-1.0)*py))+(((-0.03861452)*sj1))+((sj1*x1465))+((r10*x1457))+(((-0.247882444952069)*x1464))+(((-0.0437395992633951)*x1466)));
evalcond[4]=((((-1.0)*cj3*x1455*x1460))+((r21*x1463))+(((-1.0)*x1478))+(((-1.0)*cj3*r22*x1458))+((r20*x1456))+x1470+((cj3*cj4*x1461)));
evalcond[5]=(((r11*x1463))+((cj3*cj4*x1459))+(((-1.0)*cj3*r12*x1458))+(((-1.0)*x1477))+x1479+(((-1.0)*cj3*x1455*x1462))+((r10*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1480=((1.0)*cj5);
IkReal x1481=((1.0)*sj5);
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x1481))+(((-1.0)*r21*x1480)))),IkReal((((cj4*cj5*r20))+((r22*sj4))+(((-1.0)*cj4*r21*x1481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
CheckValue<IkReal> x1483=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x1480))+((cj4*r12))+((r11*sj4*sj5)))),-1);
if(!x1483.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1482.value)+(((1.5707963267949)*(x1483.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[4];
IkReal x1484=IKsin(j3);
IkReal x1485=IKcos(j3);
IkReal x1486=(cj4*cj5);
IkReal x1487=(r02*sj4);
IkReal x1488=(cj5*r01);
IkReal x1489=(r00*sj5);
IkReal x1490=((1.0)*x1485);
IkReal x1491=((1.0)*x1484);
IkReal x1492=(cj4*sj5*x1484);
evalcond[0]=(((cj4*r01*sj5*x1485))+(((-1.0)*x1487*x1490))+((x1484*x1488))+(((-1.0)*r00*x1486*x1490))+((x1484*x1489)));
evalcond[1]=((((-1.0)*cj5*r21*x1490))+(((-1.0)*r20*sj5*x1490))+(((-1.0)*r22*sj4*x1491))+(((-1.0)*r20*x1486*x1491))+((r21*x1492)));
evalcond[2]=(((r11*x1492))+(((-1.0)*r12*sj4*x1491))+(((-1.0)*r10*sj5*x1490))+(((-1.0)*cj5*r11*x1490))+(((-1.0)*r10*x1486*x1491)));
evalcond[3]=((1.0)+((r01*x1492))+(((-1.0)*x1489*x1490))+(((-1.0)*x1488*x1490))+(((-1.0)*r00*x1486*x1491))+(((-1.0)*x1487*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1493=(r21*sj5);
IkReal x1494=(cj3*cj4);
IkReal x1495=(cj5*r20);
IkReal x1496=((0.0879345117183112)*sj3);
IkReal x1497=(r20*sj5);
IkReal x1498=((1.00300013289883)*sj4);
IkReal x1499=(cj4*r22);
IkReal x1500=(cj5*r21);
IkReal x1501=((0.263803535154934)*sj3);
IkReal x1502=((3.00900039869648)*sj4);
IkReal x1503=((3.00900039869648)*x1499);
IkReal x1504=((0.00105912)*x1495);
IkReal x1505=(cj3*r22*sj4);
IkReal x1506=(x1500*x1501);
IkReal x1507=(x1497*x1501);
IkReal x1508=(x1493*x1502);
IkReal x1509=((0.263803535154934)*x1493*x1494);
IkReal x1510=(((x1495*x1502))+(((0.263803535154934)*x1505))+(((0.00105912)*x1493))+(((12.0)*pz))+(((0.263803535154934)*x1494*x1495)));
IkReal x1511=(x1504+x1507+x1509+x1503+x1506+x1508);
j1eval[0]=((9.03687137277633)+(IKabs(((-0.15445808)+x1511+(((-1.0)*x1510)))))+(IKabs(((0.15445808)+x1511+(((-1.0)*x1510)))))+(IKabs(((-0.15445808)+(((0.00035304)*x1495))+(((-0.0879345117183112)*x1494*x1495))+(((0.0879345117183112)*x1493*x1494))+((x1493*x1498))+(((-4.0)*pz))+(((-0.00035304)*x1493))+((x1496*x1497))+(((-0.0879345117183112)*x1505))+(((1.00300013289883)*x1499))+((x1496*x1500))+(((-1.0)*x1495*x1498))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x1512=(r21*sj5);
IkReal x1513=(cj3*cj4);
IkReal x1514=(cj5*r20);
IkReal x1515=((0.0879345117183112)*sj3);
IkReal x1516=(r20*sj5);
IkReal x1517=((1.00300013289883)*sj4);
IkReal x1518=(cj4*r22);
IkReal x1519=(cj5*r21);
IkReal x1520=((0.263803535154934)*sj3);
IkReal x1521=((3.00900039869648)*sj4);
IkReal x1522=((3.00900039869648)*x1518);
IkReal x1523=((0.00105912)*x1514);
IkReal x1524=((1.00300013289883)*x1518);
IkReal x1525=((0.00035304)*x1514);
IkReal x1526=(cj3*r22*sj4);
IkReal x1527=(x1519*x1520);
IkReal x1528=(x1516*x1520);
IkReal x1529=(x1512*x1521);
IkReal x1530=(x1515*x1516);
IkReal x1531=(x1512*x1517);
IkReal x1532=(x1515*x1519);
IkReal x1533=((0.263803535154934)*x1512*x1513);
IkReal x1534=((0.0879345117183112)*x1512*x1513);
IkReal x1535=(((x1514*x1521))+(((0.00105912)*x1512))+(((0.263803535154934)*x1513*x1514))+(((0.263803535154934)*x1526))+(((12.0)*pz)));
IkReal x1536=((((0.00035304)*x1512))+(((0.0879345117183112)*x1526))+(((0.0879345117183112)*x1513*x1514))+((x1514*x1517))+(((4.0)*pz)));
IkReal x1537=(x1528+x1522+x1533+x1527+x1523+x1529);
IkReal x1538=(x1524+x1532+x1530+x1534+x1531+x1525);
op[0]=((-0.15445808)+x1538+(((-1.0)*x1536)));
op[1]=2.25921784319408;
op[2]=((-0.15445808)+x1537+(((-1.0)*x1535)));
op[3]=4.51843568638817;
op[4]=((0.15445808)+x1537+(((-1.0)*x1535)));
op[5]=2.25921784319408;
op[6]=((0.15445808)+x1538+(((-1.0)*x1536)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1539=(cj5*r10);
IkReal x1540=((0.0870967471696526)*cj1);
IkReal x1541=(r11*sj5);
IkReal x1542=(cj4*r22);
IkReal x1543=(r21*sj5);
IkReal x1544=((0.996199857775771)*cj1);
IkReal x1545=((0.0870967471696526)*sj1);
IkReal x1546=(cj4*r12);
IkReal x1547=((0.996199857775771)*sj1);
IkReal x1548=(sj4*x1547);
IkReal x1549=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1542*x1545))+((x1541*x1548))+(((-1.0)*sj4*x1540*x1541))+(((-1.0)*sj4*x1543*x1545))+((x1545*x1549))+((x1544*x1549))+((x1546*x1547))+(((-1.0)*x1542*x1544))+(((-1.0)*x1540*x1546))+(((-1.0)*sj4*x1543*x1544))+((sj4*x1539*x1540))+(((-1.0)*x1539*x1548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1542*x1547))+((x1540*x1542))+(((-1.0)*x1540*x1549))+(((-1.0)*x1544*x1546))+(((-1.0)*sj4*x1541*x1545))+((sj4*x1540*x1543))+(((-1.0)*x1543*x1548))+((cj5*r20*x1548))+((sj4*x1539*x1544))+((sj4*x1539*x1545))+(((-1.0)*sj4*x1541*x1544))+(((-1.0)*x1545*x1546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1542*x1545))+((x1541*x1548))+(((-1.0)*sj4*x1540*x1541))+(((-1.0)*sj4*x1543*x1545))+((x1545*x1549))+((x1544*x1549))+((x1546*x1547))+(((-1.0)*x1542*x1544))+(((-1.0)*x1540*x1546))+(((-1.0)*sj4*x1543*x1544))+((sj4*x1539*x1540))+(((-1.0)*x1539*x1548))))+IKsqr(((((-1.0)*x1542*x1547))+((x1540*x1542))+(((-1.0)*x1540*x1549))+(((-1.0)*x1544*x1546))+(((-1.0)*sj4*x1541*x1545))+((sj4*x1540*x1543))+(((-1.0)*x1543*x1548))+((cj5*r20*x1548))+((sj4*x1539*x1544))+((sj4*x1539*x1545))+(((-1.0)*sj4*x1541*x1544))+(((-1.0)*x1545*x1546))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1542*x1545))+((x1541*x1548))+(((-1.0)*sj4*x1540*x1541))+(((-1.0)*sj4*x1543*x1545))+((x1545*x1549))+((x1544*x1549))+((x1546*x1547))+(((-1.0)*x1542*x1544))+(((-1.0)*x1540*x1546))+(((-1.0)*sj4*x1543*x1544))+((sj4*x1539*x1540))+(((-1.0)*x1539*x1548))), ((((-1.0)*x1542*x1547))+((x1540*x1542))+(((-1.0)*x1540*x1549))+(((-1.0)*x1544*x1546))+(((-1.0)*sj4*x1541*x1545))+((sj4*x1540*x1543))+(((-1.0)*x1543*x1548))+((cj5*r20*x1548))+((sj4*x1539*x1544))+((sj4*x1539*x1545))+(((-1.0)*sj4*x1541*x1544))+(((-1.0)*x1545*x1546))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[6];
IkReal x1550=IKsin(j2);
IkReal x1551=IKcos(j2);
IkReal x1552=((1.0)*cj4);
IkReal x1553=(sj3*sj5);
IkReal x1554=((8.826e-5)*cj5);
IkReal x1555=((1.0)*sj4);
IkReal x1556=(r11*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=(r21*sj5);
IkReal x1559=(cj5*r10);
IkReal x1560=(cj5*sj3);
IkReal x1561=(cj1*x1551);
IkReal x1562=((0.247882444952069)*x1550);
IkReal x1563=(cj1*x1550);
IkReal x1564=(cj3*cj4*sj5);
IkReal x1565=(sj1*x1551);
IkReal x1566=(sj1*x1550);
IkReal x1567=((0.996199857775771)*x1566);
IkReal x1568=((0.996199857775771)*x1561);
IkReal x1569=((0.0870967471696526)*x1563);
IkReal x1570=((0.0870967471696526)*x1565);
IkReal x1571=((0.996199857775771)*x1563);
IkReal x1572=((0.0870967471696526)*x1566);
IkReal x1573=((0.996199857775771)*x1565);
IkReal x1574=((0.0870967471696526)*x1561);
IkReal x1575=(x1568+x1570+x1569);
IkReal x1576=(x1571+x1572+x1573);
evalcond[0]=((((-1.0)*x1555*x1558))+(((-1.0)*r22*x1552))+x1574+(((-1.0)*x1576))+((sj4*x1557)));
evalcond[1]=((((-1.0)*r12*x1552))+((sj4*x1559))+(((-1.0)*x1575))+x1567+(((-1.0)*x1555*x1556)));
evalcond[2]=((((0.28240223039926)*sj1))+(((0.0437395992633951)*x1561))+(((-0.0437395992633951)*x1566))+(((0.03861452)*cj1))+((r20*x1554))+(((-0.247882444952069)*x1565))+(((-8.826e-5)*x1558))+(((-1.0)*cj1*x1562))+(((-1.0)*pz)));
evalcond[3]=((((-0.0437395992633951)*x1565))+((sj1*x1562))+(((-0.0437395992633951)*x1563))+(((0.28240223039926)*cj1))+(((-8.826e-5)*x1556))+(((-1.0)*py))+(((-0.03861452)*sj1))+(((-0.247882444952069)*x1561))+((r10*x1554)));
evalcond[4]=(((r21*x1560))+(((-1.0)*cj3*r22*x1555))+((cj3*cj4*x1558))+(((-1.0)*x1575))+(((-1.0)*cj3*x1552*x1557))+((r20*x1553))+x1567);
evalcond[5]=(x1576+(((-1.0)*cj3*r12*x1555))+((r11*x1560))+(((-1.0)*cj3*x1552*x1559))+((cj3*cj4*x1556))+(((-1.0)*x1574))+((r10*x1553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1577=(cj0*cj4);
IkReal x1578=((1.0)*cj5);
IkReal x1579=((1.0)*sj5);
IkReal x1580=(sj0*x1579);
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1578)))),-1);
if(!x1581.valid){
continue;
}
CheckValue<IkReal> x1582 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj0*x1578))+(((-1.0)*cj0*r01*x1578))+(((-1.0)*cj0*r00*x1579))+(((-1.0)*r10*x1580)))),IkReal((((cj5*r00*x1577))+((cj4*cj5*r10*sj0))+(((-1.0)*r01*x1577*x1579))+((r12*sj0*sj4))+((cj0*r02*sj4))+(((-1.0)*cj4*r11*x1580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1581.value)))+(x1582.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[3];
IkReal x1583=IKsin(j3);
IkReal x1584=IKcos(j3);
IkReal x1585=(cj4*cj5);
IkReal x1586=((1.0)*x1583);
IkReal x1587=((1.0)*x1584);
IkReal x1588=(cj4*sj5*x1583);
evalcond[0]=((((-1.0)*cj5*r21*x1587))+(((-1.0)*r20*sj5*x1587))+(((-1.0)*r20*x1585*x1586))+(((-1.0)*r22*sj4*x1586))+((r21*x1588)));
evalcond[1]=((((-1.0)*r10*sj5*x1587))+(((-1.0)*cj5*r11*x1587))+cj0+(((-1.0)*r12*sj4*x1586))+(((-1.0)*r10*x1585*x1586))+((r11*x1588)));
evalcond[2]=((((-1.0)*r00*x1585*x1586))+(((-1.0)*cj5*r01*x1587))+(((-1.0)*sj0))+((r01*x1588))+(((-1.0)*r02*sj4*x1586))+(((-1.0)*r00*sj5*x1587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1589=((0.15445808)*cj0);
IkReal x1590=((0.15445808)*sj0);
IkReal x1591=(cj4*r12);
IkReal x1592=(cj4*r02);
IkReal x1593=(cj5*r20);
IkReal x1594=(cj0*pz);
IkReal x1595=((1.00300013289883)*sj0);
IkReal x1596=(cj4*r22);
IkReal x1597=(pz*sj0);
IkReal x1598=((0.00105912)*cj0);
IkReal x1599=(r21*sj5);
IkReal x1600=((0.00105912)*sj0);
IkReal x1601=((3.00900039869648)*sj0);
IkReal x1602=((1.00300013289883)*cj0);
IkReal x1603=((12.0)*x1594);
IkReal x1604=((0.263803535154934)*x1592);
IkReal x1605=((12.0)*x1597);
IkReal x1606=((0.263803535154934)*x1591);
IkReal x1607=((0.00035304)*x1599);
IkReal x1608=((0.263803535154934)*cj5*sj4);
IkReal x1609=((0.0879345117183112)*sj4*sj5);
IkReal x1610=((3.00900039869648)*cj0*sj4);
IkReal x1611=((0.263803535154934)*sj4*sj5);
IkReal x1612=((0.0879345117183112)*cj5*sj4);
IkReal x1613=(x1598*x1599);
IkReal x1614=(r00*x1608);
IkReal x1615=(r01*x1611);
IkReal x1616=((3.00900039869648)*cj0*x1596);
IkReal x1617=(x1593*x1598);
IkReal x1618=(r10*x1608);
IkReal x1619=(x1599*x1600);
IkReal x1620=(r11*x1611);
IkReal x1621=(x1593*x1600);
IkReal x1622=(x1596*x1601);
IkReal x1623=(x1593*x1610);
IkReal x1624=(x1599*x1610);
IkReal x1625=(sj4*x1593*x1601);
IkReal x1626=(sj4*x1599*x1601);
IkReal x1627=(x1619+x1618+x1605+x1625);
IkReal x1628=(x1614+x1613+x1603+x1623);
IkReal x1629=(x1616+x1617+x1615+x1604+x1624);
IkReal x1630=(x1622+x1606+x1620+x1626+x1621);
j1eval[0]=((IKabs((x1627+(((-1.0)*x1630))+(((-1.0)*x1590)))))+(((9.03687137277633)*(IKabs(cj0))))+(IKabs(((((-1.0)*sj4*x1599*x1602))+((cj0*x1607))+x1589+((sj4*x1593*x1602))+(((-1.0)*r01*x1609))+(((-1.0)*x1596*x1602))+((r00*x1612))+(((-0.00035304)*cj0*x1593))+(((-0.0879345117183112)*x1592))+(((4.0)*x1594)))))+(IKabs((x1628+(((-1.0)*x1589))+(((-1.0)*x1629)))))+(IKabs((x1627+(((-1.0)*x1630))+x1590)))+(((9.03687137277633)*(IKabs(sj0))))+(IKabs((x1628+x1589+(((-1.0)*x1629)))))+(IKabs(((((-1.0)*x1595*x1596))+(((-0.00035304)*sj0*x1593))+(((-1.0)*sj4*x1595*x1599))+(((-1.0)*r11*x1609))+(((-0.0879345117183112)*x1591))+x1590+((r10*x1612))+(((4.0)*x1597))+((sj0*x1607))+((sj4*x1593*x1595))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1631=((0.15445808)*cj0);
IkReal x1632=(cj4*r02);
IkReal x1633=(cj5*sj4);
IkReal x1634=(sj4*sj5);
IkReal x1635=(cj0*r21);
IkReal x1636=(cj0*r20);
IkReal x1637=(cj0*pz);
IkReal x1638=((12.0)*x1637);
IkReal x1639=((0.263803535154934)*x1632);
IkReal x1640=((-2.25921784319408)*cj0);
IkReal x1641=((4.0)*x1637);
IkReal x1642=((0.0879345117183112)*x1632);
IkReal x1643=(cj0*cj4*r22);
IkReal x1644=((0.00105912)*sj5*x1635);
IkReal x1645=((0.263803535154934)*r00*x1633);
IkReal x1646=((0.263803535154934)*r01*x1634);
IkReal x1647=((3.00900039869648)*x1643);
IkReal x1648=((0.00105912)*cj5*x1636);
IkReal x1649=((0.00035304)*sj5*x1635);
IkReal x1650=((0.0879345117183112)*r00*x1633);
IkReal x1651=((1.00300013289883)*x1643);
IkReal x1652=((0.00035304)*cj5*x1636);
IkReal x1653=((0.0879345117183112)*r01*x1634);
IkReal x1654=((3.00900039869648)*x1633*x1636);
IkReal x1655=((3.00900039869648)*x1634*x1635);
IkReal x1656=((1.00300013289883)*x1633*x1636);
IkReal x1657=((1.00300013289883)*x1634*x1635);
IkReal x1658=(x1638+x1644+x1645+x1654);
IkReal x1659=(x1649+x1641+x1656+x1650);
IkReal x1660=(x1639+x1646+x1647+x1655+x1648);
IkReal x1661=(x1653+x1657+x1652+x1642+x1651);
op[0]=((((-1.0)*x1661))+x1631+x1659);
op[1]=x1640;
op[2]=(x1631+x1658+(((-1.0)*x1660)));
op[3]=((-4.51843568638817)*cj0);
op[4]=((((-1.0)*x1631))+x1658+(((-1.0)*x1660)));
op[5]=x1640;
op[6]=((((-1.0)*x1661))+(((-1.0)*x1631))+x1659);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x1662=((0.15445808)*sj0);
IkReal x1663=((0.00035304)*sj0);
IkReal x1664=(r21*sj5);
IkReal x1665=(cj4*r12);
IkReal x1666=(cj5*sj4);
IkReal x1667=((2.25921784319408)*sj0);
IkReal x1668=(cj5*r20);
IkReal x1669=((1.00300013289883)*sj0);
IkReal x1670=(cj4*r22);
IkReal x1671=(pz*sj0);
IkReal x1672=((0.00105912)*sj0);
IkReal x1673=((3.00900039869648)*sj0);
IkReal x1674=((4.0)*x1671);
IkReal x1675=((12.0)*x1671);
IkReal x1676=((0.263803535154934)*x1665);
IkReal x1677=((0.0879345117183112)*x1665);
IkReal x1678=(r11*sj4*sj5);
IkReal x1679=((0.0879345117183112)*r10*x1666);
IkReal x1680=(x1663*x1664);
IkReal x1681=((0.263803535154934)*r10*x1666);
IkReal x1682=(x1664*x1672);
IkReal x1683=((0.263803535154934)*x1678);
IkReal x1684=(x1668*x1672);
IkReal x1685=(x1670*x1673);
IkReal x1686=(x1669*x1670);
IkReal x1687=(x1663*x1668);
IkReal x1688=((0.0879345117183112)*x1678);
IkReal x1689=(r20*x1666*x1669);
IkReal x1690=(r20*x1666*x1673);
IkReal x1691=(sj4*x1664*x1673);
IkReal x1692=(sj4*x1664*x1669);
IkReal x1693=(x1679+x1674+x1689+x1680);
IkReal x1694=(x1675+x1682+x1681+x1690);
IkReal x1695=(x1686+x1692+x1688+x1677+x1687);
IkReal x1696=(x1676+x1683+x1684+x1691+x1685);
j1evalpoly[0]=((((-1.0)*x1667*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x1695))+(((-1.0)*x1662))+(((-4.51843568638817)*sj0*(htj1*htj1*htj1)))+(((-1.0)*htj1*x1667))+(((htj1*htj1)*(((((-1.0)*x1662))+(((-1.0)*x1696))+x1694))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1695))+x1662+x1693))))+x1693+(((htj1*htj1*htj1*htj1)*((x1662+(((-1.0)*x1696))+x1694)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1697=cj1*cj1;
IkReal x1698=((3.96189143341844)*pz);
IkReal x1699=((0.000349676537913511)*sj1);
IkReal x1700=(cj5*r20);
IkReal x1701=(r21*sj5);
IkReal x1702=(sj1*sj4);
IkReal x1703=((45.3155348592594)*pz);
IkReal x1704=((11.275775124385)*cj1);
IkReal x1705=(cj4*r22);
IkReal x1706=(cj1*sj1);
IkReal x1707=((1.98964426633813)*sj4);
IkReal x1708=((0.00399954910667823)*sj1);
IkReal x1709=((1.98964426633813)*x1705);
IkReal x1710=(cj1*x1701);
if( IKabs(((12.7972081159903)+((x1700*x1708))+((cj1*x1698))+(((-1.0)*x1701*x1708))+(((-11.275775124385)*x1700*x1702))+((cj1*x1700*x1707))+(((-0.000349676537913511)*cj1*x1700))+(((-1.0)*x1707*x1710))+(((-1.0)*sj1*x1703))+(((0.000349676537913511)*x1710))+(((11.275775124385)*x1701*x1702))+(((-12.9501946519838)*x1697))+(((0.630990649736478)*x1706))+(((11.275775124385)*sj1*x1705))+(((-1.0)*cj1*x1709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.11884697739709)+(((0.00399954910667823)*x1710))+(((-1.0)*x1704*x1705))+(((-12.9501946519838)*x1706))+(((1.98964426633813)*x1700*x1702))+((sj4*x1700*x1704))+(((-1.0)*x1699*x1700))+(((-1.0)*sj1*x1709))+(((-1.98964426633813)*x1701*x1702))+(((-0.630990649736478)*x1697))+((x1699*x1701))+((sj1*x1698))+(((-0.00399954910667823)*cj1*x1700))+((cj1*x1703))+(((-1.0)*sj4*x1701*x1704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.7972081159903)+((x1700*x1708))+((cj1*x1698))+(((-1.0)*x1701*x1708))+(((-11.275775124385)*x1700*x1702))+((cj1*x1700*x1707))+(((-0.000349676537913511)*cj1*x1700))+(((-1.0)*x1707*x1710))+(((-1.0)*sj1*x1703))+(((0.000349676537913511)*x1710))+(((11.275775124385)*x1701*x1702))+(((-12.9501946519838)*x1697))+(((0.630990649736478)*x1706))+(((11.275775124385)*sj1*x1705))+(((-1.0)*cj1*x1709))))+IKsqr(((-1.11884697739709)+(((0.00399954910667823)*x1710))+(((-1.0)*x1704*x1705))+(((-12.9501946519838)*x1706))+(((1.98964426633813)*x1700*x1702))+((sj4*x1700*x1704))+(((-1.0)*x1699*x1700))+(((-1.0)*sj1*x1709))+(((-1.98964426633813)*x1701*x1702))+(((-0.630990649736478)*x1697))+((x1699*x1701))+((sj1*x1698))+(((-0.00399954910667823)*cj1*x1700))+((cj1*x1703))+(((-1.0)*sj4*x1701*x1704))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((12.7972081159903)+((x1700*x1708))+((cj1*x1698))+(((-1.0)*x1701*x1708))+(((-11.275775124385)*x1700*x1702))+((cj1*x1700*x1707))+(((-0.000349676537913511)*cj1*x1700))+(((-1.0)*x1707*x1710))+(((-1.0)*sj1*x1703))+(((0.000349676537913511)*x1710))+(((11.275775124385)*x1701*x1702))+(((-12.9501946519838)*x1697))+(((0.630990649736478)*x1706))+(((11.275775124385)*sj1*x1705))+(((-1.0)*cj1*x1709))), ((-1.11884697739709)+(((0.00399954910667823)*x1710))+(((-1.0)*x1704*x1705))+(((-12.9501946519838)*x1706))+(((1.98964426633813)*x1700*x1702))+((sj4*x1700*x1704))+(((-1.0)*x1699*x1700))+(((-1.0)*sj1*x1709))+(((-1.98964426633813)*x1701*x1702))+(((-0.630990649736478)*x1697))+((x1699*x1701))+((sj1*x1698))+(((-0.00399954910667823)*cj1*x1700))+((cj1*x1703))+(((-1.0)*sj4*x1701*x1704))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[9];
IkReal x1711=IKsin(j2);
IkReal x1712=IKcos(j2);
IkReal x1713=((1.0)*cj4);
IkReal x1714=(cj5*sj3);
IkReal x1715=(sj3*sj5);
IkReal x1716=((8.826e-5)*cj5);
IkReal x1717=(cj0*sj1);
IkReal x1718=((0.247882444952069)*sj0);
IkReal x1719=((0.0870967471696526)*cj0);
IkReal x1720=((0.996199857775771)*sj0);
IkReal x1721=((1.0)*sj4);
IkReal x1722=(r11*sj5);
IkReal x1723=(cj5*r20);
IkReal x1724=((8.826e-5)*sj5);
IkReal x1725=((0.0870967471696526)*sj0);
IkReal x1726=(cj3*cj5);
IkReal x1727=(sj0*sj1);
IkReal x1728=((0.28240223039926)*cj1);
IkReal x1729=(cj5*sj4);
IkReal x1730=(cj1*x1712);
IkReal x1731=(cj1*x1711);
IkReal x1732=((0.0437395992633951)*x1712);
IkReal x1733=(sj1*x1711);
IkReal x1734=(cj3*cj4*sj5);
IkReal x1735=(sj1*x1712);
IkReal x1736=((0.996199857775771)*x1730);
evalcond[0]=((((0.0870967471696526)*x1730))+(((-0.0870967471696526)*x1733))+(((-0.996199857775771)*x1735))+(((-1.0)*r21*sj5*x1721))+((sj4*x1723))+(((-0.996199857775771)*x1731))+(((-1.0)*r22*x1713)));
evalcond[1]=((((0.28240223039926)*sj1))+(((0.03861452)*cj1))+(((-0.247882444952069)*x1735))+((r20*x1716))+(((-1.0)*r21*x1724))+(((-0.247882444952069)*x1731))+(((-0.0437395992633951)*x1733))+(((0.0437395992633951)*x1730))+(((-1.0)*pz)));
evalcond[2]=(((cj0*x1736))+(((-1.0)*r02*x1713))+(((-1.0)*r01*sj5*x1721))+(((0.0870967471696526)*x1712*x1717))+(((-0.996199857775771)*x1711*x1717))+((r00*x1729))+((x1719*x1731)));
evalcond[3]=(((x1725*x1735))+((x1725*x1731))+(((-1.0)*x1721*x1722))+(((-1.0)*x1720*x1733))+((r10*x1729))+(((-1.0)*r12*x1713))+((x1720*x1730)));
evalcond[4]=((((0.0437395992633951)*cj0*x1731))+(((-1.0)*px))+((r00*x1716))+(((0.247882444952069)*cj0*x1730))+(((-1.0)*r01*x1724))+((x1717*x1732))+(((0.03861452)*x1717))+(((-1.0)*cj0*x1728))+(((-0.247882444952069)*x1711*x1717)));
evalcond[5]=(((x1727*x1732))+(((-1.0)*x1718*x1733))+(((0.0437395992633951)*sj0*x1731))+(((-1.0)*py))+(((-1.0)*sj0*x1728))+((r10*x1716))+((x1718*x1730))+(((0.03861452)*x1727))+(((-8.826e-5)*x1722)));
evalcond[6]=((((-1.0)*cj3*x1713*x1723))+(((-0.0870967471696526)*x1735))+((r21*x1714))+((r21*x1734))+(((-0.0870967471696526)*x1731))+(((-1.0)*x1736))+(((-1.0)*cj3*r22*x1721))+(((0.996199857775771)*x1733))+((r20*x1715)));
evalcond[7]=(((x1719*x1730))+(((-1.0)*r00*x1713*x1726))+((r00*x1715))+(((-0.0870967471696526)*x1711*x1717))+((r01*x1734))+((r01*x1714))+(((-0.996199857775771)*cj0*x1731))+(((-1.0)*cj3*r02*x1721))+(((-0.996199857775771)*x1712*x1717)));
evalcond[8]=((((-1.0)*x1720*x1735))+((cj3*cj4*x1722))+(((-1.0)*r10*x1713*x1726))+((r10*x1715))+(((-1.0)*x1720*x1731))+((x1725*x1730))+((r11*x1714))+(((-1.0)*cj3*r12*x1721))+(((-1.0)*x1725*x1733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1737=((1.0)*sj0);
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x1737))+(((-1.0)*r20*sj5*x1737)))),IkReal((((r22*sj0*sj4))+(((-1.0)*cj4*r21*sj5*x1737))+((cj4*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1738.value)))+(x1739.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[3];
IkReal x1740=IKsin(j3);
IkReal x1741=IKcos(j3);
IkReal x1742=(cj4*cj5);
IkReal x1743=((1.0)*x1740);
IkReal x1744=((1.0)*x1741);
IkReal x1745=(cj4*sj5*x1740);
evalcond[0]=((((-1.0)*r22*sj4*x1743))+(((-1.0)*r20*x1742*x1743))+((r21*x1745))+(((-1.0)*cj5*r21*x1744))+(((-1.0)*r20*sj5*x1744)));
evalcond[1]=((((-1.0)*r10*x1742*x1743))+(((-1.0)*r12*sj4*x1743))+cj0+(((-1.0)*r10*sj5*x1744))+(((-1.0)*cj5*r11*x1744))+((r11*x1745)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1742*x1743))+(((-1.0)*cj5*r01*x1744))+(((-1.0)*r00*sj5*x1744))+(((-1.0)*r02*sj4*x1743))+((r01*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1746=((0.15445808)*cj0);
IkReal x1747=((0.15445808)*sj0);
IkReal x1748=(cj4*r12);
IkReal x1749=(cj4*r02);
IkReal x1750=(cj5*r20);
IkReal x1751=(cj0*pz);
IkReal x1752=((1.00300013289883)*sj0);
IkReal x1753=(cj4*r22);
IkReal x1754=(pz*sj0);
IkReal x1755=((0.00105912)*cj0);
IkReal x1756=(r21*sj5);
IkReal x1757=((0.00105912)*sj0);
IkReal x1758=((3.00900039869648)*sj0);
IkReal x1759=((1.00300013289883)*cj0);
IkReal x1760=((12.0)*x1751);
IkReal x1761=((0.263803535154934)*x1749);
IkReal x1762=((12.0)*x1754);
IkReal x1763=((0.263803535154934)*x1748);
IkReal x1764=((0.00035304)*x1756);
IkReal x1765=((0.263803535154934)*cj5*sj4);
IkReal x1766=((0.0879345117183112)*sj4*sj5);
IkReal x1767=((3.00900039869648)*cj0*sj4);
IkReal x1768=((0.263803535154934)*sj4*sj5);
IkReal x1769=((0.0879345117183112)*cj5*sj4);
IkReal x1770=(x1755*x1756);
IkReal x1771=(r00*x1765);
IkReal x1772=(r01*x1768);
IkReal x1773=((3.00900039869648)*cj0*x1753);
IkReal x1774=(x1750*x1755);
IkReal x1775=(r10*x1765);
IkReal x1776=(x1756*x1757);
IkReal x1777=(r11*x1768);
IkReal x1778=(x1750*x1757);
IkReal x1779=(x1753*x1758);
IkReal x1780=(x1750*x1767);
IkReal x1781=(x1756*x1767);
IkReal x1782=(sj4*x1750*x1758);
IkReal x1783=(sj4*x1756*x1758);
IkReal x1784=(x1782+x1762+x1776+x1775);
IkReal x1785=(x1770+x1771+x1760+x1780);
IkReal x1786=(x1761+x1773+x1774+x1772+x1781);
IkReal x1787=(x1763+x1777+x1779+x1783+x1778);
j1eval[0]=((((9.03687137277633)*(IKabs(cj0))))+(IKabs((x1784+(((-1.0)*x1747))+(((-1.0)*x1787)))))+(((9.03687137277633)*(IKabs(sj0))))+(IKabs(((((-1.0)*r01*x1766))+((r00*x1769))+((sj4*x1750*x1759))+(((4.0)*x1751))+((cj0*x1764))+(((-1.0)*x1753*x1759))+(((-1.0)*sj4*x1756*x1759))+(((-0.00035304)*cj0*x1750))+x1746+(((-0.0879345117183112)*x1749)))))+(IKabs(((((-1.0)*x1786))+x1785+x1746)))+(IKabs((((r10*x1769))+(((-0.0879345117183112)*x1748))+((sj0*x1764))+((sj4*x1750*x1752))+x1747+(((4.0)*x1754))+(((-1.0)*x1752*x1753))+(((-1.0)*r11*x1766))+(((-0.00035304)*sj0*x1750))+(((-1.0)*sj4*x1752*x1756)))))+(IKabs(((((-1.0)*x1746))+(((-1.0)*x1786))+x1785)))+(IKabs((x1784+x1747+(((-1.0)*x1787))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1788=((0.15445808)*cj0);
IkReal x1789=(cj4*r02);
IkReal x1790=(cj5*sj4);
IkReal x1791=(sj4*sj5);
IkReal x1792=(cj0*r21);
IkReal x1793=(cj0*r20);
IkReal x1794=(cj0*pz);
IkReal x1795=((12.0)*x1794);
IkReal x1796=((0.263803535154934)*x1789);
IkReal x1797=((-2.25921784319408)*cj0);
IkReal x1798=((4.0)*x1794);
IkReal x1799=((0.0879345117183112)*x1789);
IkReal x1800=(cj0*cj4*r22);
IkReal x1801=((0.00105912)*sj5*x1792);
IkReal x1802=((0.263803535154934)*r00*x1790);
IkReal x1803=((0.263803535154934)*r01*x1791);
IkReal x1804=((3.00900039869648)*x1800);
IkReal x1805=((0.00105912)*cj5*x1793);
IkReal x1806=((0.00035304)*sj5*x1792);
IkReal x1807=((0.0879345117183112)*r00*x1790);
IkReal x1808=((1.00300013289883)*x1800);
IkReal x1809=((0.00035304)*cj5*x1793);
IkReal x1810=((0.0879345117183112)*r01*x1791);
IkReal x1811=((3.00900039869648)*x1790*x1793);
IkReal x1812=((3.00900039869648)*x1791*x1792);
IkReal x1813=((1.00300013289883)*x1790*x1793);
IkReal x1814=((1.00300013289883)*x1791*x1792);
IkReal x1815=(x1802+x1801+x1795+x1811);
IkReal x1816=(x1798+x1813+x1807+x1806);
IkReal x1817=(x1804+x1803+x1796+x1805+x1812);
IkReal x1818=(x1808+x1814+x1799+x1810+x1809);
op[0]=(x1788+(((-1.0)*x1818))+x1816);
op[1]=x1797;
op[2]=(x1788+x1815+(((-1.0)*x1817)));
op[3]=((-4.51843568638817)*cj0);
op[4]=((((-1.0)*x1788))+x1815+(((-1.0)*x1817)));
op[5]=x1797;
op[6]=((((-1.0)*x1788))+(((-1.0)*x1818))+x1816);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x1819=((0.15445808)*sj0);
IkReal x1820=((0.00035304)*sj0);
IkReal x1821=(r21*sj5);
IkReal x1822=(cj4*r12);
IkReal x1823=(cj5*sj4);
IkReal x1824=((2.25921784319408)*sj0);
IkReal x1825=(cj5*r20);
IkReal x1826=((1.00300013289883)*sj0);
IkReal x1827=(cj4*r22);
IkReal x1828=(pz*sj0);
IkReal x1829=((0.00105912)*sj0);
IkReal x1830=((3.00900039869648)*sj0);
IkReal x1831=((4.0)*x1828);
IkReal x1832=((12.0)*x1828);
IkReal x1833=((0.263803535154934)*x1822);
IkReal x1834=((0.0879345117183112)*x1822);
IkReal x1835=(r11*sj4*sj5);
IkReal x1836=((0.0879345117183112)*r10*x1823);
IkReal x1837=(x1820*x1821);
IkReal x1838=((0.263803535154934)*r10*x1823);
IkReal x1839=(x1821*x1829);
IkReal x1840=((0.263803535154934)*x1835);
IkReal x1841=(x1825*x1829);
IkReal x1842=(x1827*x1830);
IkReal x1843=(x1826*x1827);
IkReal x1844=(x1820*x1825);
IkReal x1845=((0.0879345117183112)*x1835);
IkReal x1846=(r20*x1823*x1826);
IkReal x1847=(r20*x1823*x1830);
IkReal x1848=(sj4*x1821*x1830);
IkReal x1849=(sj4*x1821*x1826);
IkReal x1850=(x1831+x1837+x1836+x1846);
IkReal x1851=(x1839+x1838+x1847+x1832);
IkReal x1852=(x1844+x1849+x1843+x1845+x1834);
IkReal x1853=(x1841+x1833+x1842+x1848+x1840);
j1evalpoly[0]=(x1850+(((-1.0)*x1824*(htj1*htj1*htj1*htj1*htj1)))+(((-4.51843568638817)*sj0*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x1853))+x1851+x1819))))+(((htj1*htj1)*(((((-1.0)*x1853))+x1851+(((-1.0)*x1819))))))+(((-1.0)*x1852))+(((-1.0)*htj1*x1824))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x1850+x1819+(((-1.0)*x1852))))))+(((-1.0)*x1819)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1854=cj1*cj1;
IkReal x1855=((3.96189143341844)*pz);
IkReal x1856=((0.000349676537913511)*sj1);
IkReal x1857=(cj5*r20);
IkReal x1858=(r21*sj5);
IkReal x1859=(sj1*sj4);
IkReal x1860=((45.3155348592594)*pz);
IkReal x1861=((11.275775124385)*cj1);
IkReal x1862=(cj4*r22);
IkReal x1863=(cj1*sj1);
IkReal x1864=((1.98964426633813)*sj4);
IkReal x1865=((0.00399954910667823)*sj1);
IkReal x1866=((1.98964426633813)*x1862);
IkReal x1867=(cj1*x1858);
if( IKabs(((12.7972081159903)+(((0.000349676537913511)*x1867))+(((-12.9501946519838)*x1854))+((cj1*x1855))+(((11.275775124385)*x1858*x1859))+(((0.630990649736478)*x1863))+(((-1.0)*x1858*x1865))+(((-1.0)*cj1*x1866))+(((-1.0)*sj1*x1860))+((cj1*x1857*x1864))+(((-1.0)*x1864*x1867))+(((-11.275775124385)*x1857*x1859))+(((11.275775124385)*sj1*x1862))+(((-0.000349676537913511)*cj1*x1857))+((x1857*x1865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.11884697739709)+(((-1.98964426633813)*x1858*x1859))+(((-1.0)*sj1*x1866))+(((1.98964426633813)*x1857*x1859))+((sj4*x1857*x1861))+(((-12.9501946519838)*x1863))+(((-1.0)*x1861*x1862))+((sj1*x1855))+(((-0.630990649736478)*x1854))+((x1856*x1858))+((cj1*x1860))+(((-1.0)*sj4*x1858*x1861))+(((0.00399954910667823)*x1867))+(((-1.0)*x1856*x1857))+(((-0.00399954910667823)*cj1*x1857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.7972081159903)+(((0.000349676537913511)*x1867))+(((-12.9501946519838)*x1854))+((cj1*x1855))+(((11.275775124385)*x1858*x1859))+(((0.630990649736478)*x1863))+(((-1.0)*x1858*x1865))+(((-1.0)*cj1*x1866))+(((-1.0)*sj1*x1860))+((cj1*x1857*x1864))+(((-1.0)*x1864*x1867))+(((-11.275775124385)*x1857*x1859))+(((11.275775124385)*sj1*x1862))+(((-0.000349676537913511)*cj1*x1857))+((x1857*x1865))))+IKsqr(((-1.11884697739709)+(((-1.98964426633813)*x1858*x1859))+(((-1.0)*sj1*x1866))+(((1.98964426633813)*x1857*x1859))+((sj4*x1857*x1861))+(((-12.9501946519838)*x1863))+(((-1.0)*x1861*x1862))+((sj1*x1855))+(((-0.630990649736478)*x1854))+((x1856*x1858))+((cj1*x1860))+(((-1.0)*sj4*x1858*x1861))+(((0.00399954910667823)*x1867))+(((-1.0)*x1856*x1857))+(((-0.00399954910667823)*cj1*x1857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((12.7972081159903)+(((0.000349676537913511)*x1867))+(((-12.9501946519838)*x1854))+((cj1*x1855))+(((11.275775124385)*x1858*x1859))+(((0.630990649736478)*x1863))+(((-1.0)*x1858*x1865))+(((-1.0)*cj1*x1866))+(((-1.0)*sj1*x1860))+((cj1*x1857*x1864))+(((-1.0)*x1864*x1867))+(((-11.275775124385)*x1857*x1859))+(((11.275775124385)*sj1*x1862))+(((-0.000349676537913511)*cj1*x1857))+((x1857*x1865))), ((-1.11884697739709)+(((-1.98964426633813)*x1858*x1859))+(((-1.0)*sj1*x1866))+(((1.98964426633813)*x1857*x1859))+((sj4*x1857*x1861))+(((-12.9501946519838)*x1863))+(((-1.0)*x1861*x1862))+((sj1*x1855))+(((-0.630990649736478)*x1854))+((x1856*x1858))+((cj1*x1860))+(((-1.0)*sj4*x1858*x1861))+(((0.00399954910667823)*x1867))+(((-1.0)*x1856*x1857))+(((-0.00399954910667823)*cj1*x1857))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[9];
IkReal x1868=IKsin(j2);
IkReal x1869=IKcos(j2);
IkReal x1870=((1.0)*cj4);
IkReal x1871=(cj5*sj3);
IkReal x1872=(sj3*sj5);
IkReal x1873=((8.826e-5)*cj5);
IkReal x1874=(cj0*sj1);
IkReal x1875=((0.247882444952069)*sj0);
IkReal x1876=((0.0870967471696526)*cj0);
IkReal x1877=((0.996199857775771)*sj0);
IkReal x1878=((1.0)*sj4);
IkReal x1879=(r11*sj5);
IkReal x1880=(cj5*r20);
IkReal x1881=((8.826e-5)*sj5);
IkReal x1882=((0.0870967471696526)*sj0);
IkReal x1883=(cj3*cj5);
IkReal x1884=(sj0*sj1);
IkReal x1885=((0.28240223039926)*cj1);
IkReal x1886=(cj5*sj4);
IkReal x1887=(cj1*x1869);
IkReal x1888=(cj1*x1868);
IkReal x1889=((0.0437395992633951)*x1869);
IkReal x1890=(sj1*x1868);
IkReal x1891=(cj3*cj4*sj5);
IkReal x1892=(sj1*x1869);
IkReal x1893=((0.996199857775771)*x1887);
evalcond[0]=((((-0.996199857775771)*x1888))+((sj4*x1880))+(((-0.0870967471696526)*x1890))+(((-1.0)*r21*sj5*x1878))+(((0.0870967471696526)*x1887))+(((-1.0)*r22*x1870))+(((-0.996199857775771)*x1892)));
evalcond[1]=((((-0.247882444952069)*x1892))+((r20*x1873))+(((0.28240223039926)*sj1))+(((-1.0)*r21*x1881))+(((0.03861452)*cj1))+(((-0.247882444952069)*x1888))+(((0.0437395992633951)*x1887))+(((-0.0437395992633951)*x1890))+(((-1.0)*pz)));
evalcond[2]=(((cj0*x1893))+((x1876*x1888))+(((-1.0)*r01*sj5*x1878))+(((-0.996199857775771)*x1868*x1874))+(((0.0870967471696526)*x1869*x1874))+(((-1.0)*r02*x1870))+((r00*x1886)));
evalcond[3]=((((-1.0)*x1877*x1890))+((x1882*x1888))+((r10*x1886))+(((-1.0)*x1878*x1879))+((x1877*x1887))+((x1882*x1892))+(((-1.0)*r12*x1870)));
evalcond[4]=((((0.0437395992633951)*cj0*x1888))+(((-1.0)*r01*x1881))+(((-1.0)*px))+((x1874*x1889))+(((0.03861452)*x1874))+(((-0.247882444952069)*x1868*x1874))+(((0.247882444952069)*cj0*x1887))+((r00*x1873))+(((-1.0)*cj0*x1885)));
evalcond[5]=((((-1.0)*x1875*x1890))+(((-8.826e-5)*x1879))+((x1875*x1887))+(((0.03861452)*x1884))+(((-1.0)*py))+((r10*x1873))+(((0.0437395992633951)*sj0*x1888))+((x1884*x1889))+(((-1.0)*sj0*x1885)));
evalcond[6]=((((-1.0)*cj3*x1870*x1880))+(((-1.0)*x1893))+(((-0.0870967471696526)*x1892))+(((-1.0)*cj3*r22*x1878))+((r21*x1891))+((r21*x1871))+((r20*x1872))+(((-0.0870967471696526)*x1888))+(((0.996199857775771)*x1890)));
evalcond[7]=(((x1876*x1887))+(((-0.996199857775771)*x1869*x1874))+(((-1.0)*r00*x1870*x1883))+((r00*x1872))+((r01*x1891))+(((-0.996199857775771)*cj0*x1888))+(((-0.0870967471696526)*x1868*x1874))+(((-1.0)*cj3*r02*x1878))+((r01*x1871)));
evalcond[8]=((((-1.0)*x1882*x1890))+((x1882*x1887))+(((-1.0)*r10*x1870*x1883))+(((-1.0)*cj3*r12*x1878))+(((-1.0)*x1877*x1892))+((r10*x1872))+((r11*x1871))+((cj3*cj4*x1879))+(((-1.0)*x1877*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1894=((1.0)*cj4);
IkReal x1895=(cj0*cj5);
IkReal x1896=(cj0*sj5);
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1895))+(((-1.0)*r20*x1896)))),IkReal((((cj0*r22*sj4))+((cj4*r20*x1895))+(((-1.0)*r21*x1894*x1896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
CheckValue<IkReal> x1898=IKPowWithIntegerCheck(IKsign((((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5))+(((-1.0)*r02*x1894)))),-1);
if(!x1898.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1897.value)+(((1.5707963267949)*(x1898.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[3];
IkReal x1899=IKsin(j3);
IkReal x1900=IKcos(j3);
IkReal x1901=(cj4*cj5);
IkReal x1902=((1.0)*x1899);
IkReal x1903=((1.0)*x1900);
IkReal x1904=(cj4*sj5*x1899);
evalcond[0]=((((-1.0)*cj5*r21*x1903))+(((-1.0)*r20*sj5*x1903))+((r21*x1904))+(((-1.0)*r20*x1901*x1902))+(((-1.0)*r22*sj4*x1902)));
evalcond[1]=((((-1.0)*r12*sj4*x1902))+((r11*x1904))+cj0+(((-1.0)*r10*sj5*x1903))+(((-1.0)*cj5*r11*x1903))+(((-1.0)*r10*x1901*x1902)));
evalcond[2]=((((-1.0)*cj5*r01*x1903))+(((-1.0)*r00*x1901*x1902))+(((-1.0)*sj0))+((r01*x1904))+(((-1.0)*r02*sj4*x1902))+(((-1.0)*r00*sj5*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1905=((0.15445808)*cj0);
IkReal x1906=((0.15445808)*sj0);
IkReal x1907=(cj4*r12);
IkReal x1908=(cj4*r02);
IkReal x1909=(cj5*r20);
IkReal x1910=(cj0*pz);
IkReal x1911=((1.00300013289883)*sj0);
IkReal x1912=(cj4*r22);
IkReal x1913=(pz*sj0);
IkReal x1914=((0.00105912)*cj0);
IkReal x1915=(r21*sj5);
IkReal x1916=((0.00105912)*sj0);
IkReal x1917=((3.00900039869648)*sj0);
IkReal x1918=((1.00300013289883)*cj0);
IkReal x1919=((12.0)*x1910);
IkReal x1920=((0.263803535154934)*x1908);
IkReal x1921=((12.0)*x1913);
IkReal x1922=((0.263803535154934)*x1907);
IkReal x1923=((0.00035304)*x1915);
IkReal x1924=((0.263803535154934)*cj5*sj4);
IkReal x1925=((0.0879345117183112)*sj4*sj5);
IkReal x1926=((3.00900039869648)*cj0*sj4);
IkReal x1927=((0.263803535154934)*sj4*sj5);
IkReal x1928=((0.0879345117183112)*cj5*sj4);
IkReal x1929=(x1914*x1915);
IkReal x1930=(r00*x1924);
IkReal x1931=(r01*x1927);
IkReal x1932=((3.00900039869648)*cj0*x1912);
IkReal x1933=(x1909*x1914);
IkReal x1934=(r10*x1924);
IkReal x1935=(x1915*x1916);
IkReal x1936=(r11*x1927);
IkReal x1937=(x1909*x1916);
IkReal x1938=(x1912*x1917);
IkReal x1939=(x1909*x1926);
IkReal x1940=(x1915*x1926);
IkReal x1941=(sj4*x1909*x1917);
IkReal x1942=(sj4*x1915*x1917);
IkReal x1943=(x1921+x1941+x1934+x1935);
IkReal x1944=(x1919+x1929+x1939+x1930);
IkReal x1945=(x1933+x1932+x1940+x1931+x1920);
IkReal x1946=(x1937+x1938+x1922+x1942+x1936);
j1eval[0]=((((9.03687137277633)*(IKabs(cj0))))+(IKabs(((((-1.0)*x1906))+(((-1.0)*x1946))+x1943)))+(IKabs(((((-1.0)*x1905))+x1944+(((-1.0)*x1945)))))+(IKabs(((((-1.0)*x1911*x1912))+x1906+(((-1.0)*sj4*x1911*x1915))+((sj0*x1923))+(((-0.00035304)*sj0*x1909))+(((-1.0)*r11*x1925))+((r10*x1928))+(((-0.0879345117183112)*x1907))+((sj4*x1909*x1911))+(((4.0)*x1913)))))+(((9.03687137277633)*(IKabs(sj0))))+(IKabs((x1906+(((-1.0)*x1946))+x1943)))+(IKabs((((sj4*x1909*x1918))+x1905+(((-0.00035304)*cj0*x1909))+(((-1.0)*sj4*x1915*x1918))+((cj0*x1923))+((r00*x1928))+(((-0.0879345117183112)*x1908))+(((-1.0)*x1912*x1918))+(((-1.0)*r01*x1925))+(((4.0)*x1910)))))+(IKabs((x1905+x1944+(((-1.0)*x1945))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1947=((0.15445808)*cj0);
IkReal x1948=(cj4*r02);
IkReal x1949=(cj5*sj4);
IkReal x1950=(sj4*sj5);
IkReal x1951=(cj0*r21);
IkReal x1952=(cj0*r20);
IkReal x1953=(cj0*pz);
IkReal x1954=((12.0)*x1953);
IkReal x1955=((0.263803535154934)*x1948);
IkReal x1956=((-2.25921784319408)*cj0);
IkReal x1957=((4.0)*x1953);
IkReal x1958=((0.0879345117183112)*x1948);
IkReal x1959=(cj0*cj4*r22);
IkReal x1960=((0.00105912)*sj5*x1951);
IkReal x1961=((0.263803535154934)*r00*x1949);
IkReal x1962=((0.263803535154934)*r01*x1950);
IkReal x1963=((3.00900039869648)*x1959);
IkReal x1964=((0.00105912)*cj5*x1952);
IkReal x1965=((0.00035304)*sj5*x1951);
IkReal x1966=((0.0879345117183112)*r00*x1949);
IkReal x1967=((1.00300013289883)*x1959);
IkReal x1968=((0.00035304)*cj5*x1952);
IkReal x1969=((0.0879345117183112)*r01*x1950);
IkReal x1970=((3.00900039869648)*x1949*x1952);
IkReal x1971=((3.00900039869648)*x1950*x1951);
IkReal x1972=((1.00300013289883)*x1949*x1952);
IkReal x1973=((1.00300013289883)*x1950*x1951);
IkReal x1974=(x1960+x1970+x1961+x1954);
IkReal x1975=(x1972+x1957+x1966+x1965);
IkReal x1976=(x1963+x1962+x1964+x1971+x1955);
IkReal x1977=(x1973+x1958+x1967+x1969+x1968);
op[0]=((((-1.0)*x1977))+x1947+x1975);
op[1]=x1956;
op[2]=(x1947+x1974+(((-1.0)*x1976)));
op[3]=((-4.51843568638817)*cj0);
op[4]=(x1974+(((-1.0)*x1947))+(((-1.0)*x1976)));
op[5]=x1956;
op[6]=((((-1.0)*x1977))+(((-1.0)*x1947))+x1975);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
tj1 = IKtan(j1);
htj1 = IKtan(j1/2);

IkReal x1978=((0.15445808)*sj0);
IkReal x1979=((0.00035304)*sj0);
IkReal x1980=(r21*sj5);
IkReal x1981=(cj4*r12);
IkReal x1982=(cj5*sj4);
IkReal x1983=((2.25921784319408)*sj0);
IkReal x1984=(cj5*r20);
IkReal x1985=((1.00300013289883)*sj0);
IkReal x1986=(cj4*r22);
IkReal x1987=(pz*sj0);
IkReal x1988=((0.00105912)*sj0);
IkReal x1989=((3.00900039869648)*sj0);
IkReal x1990=((4.0)*x1987);
IkReal x1991=((12.0)*x1987);
IkReal x1992=((0.263803535154934)*x1981);
IkReal x1993=((0.0879345117183112)*x1981);
IkReal x1994=(r11*sj4*sj5);
IkReal x1995=((0.0879345117183112)*r10*x1982);
IkReal x1996=(x1979*x1980);
IkReal x1997=((0.263803535154934)*r10*x1982);
IkReal x1998=(x1980*x1988);
IkReal x1999=((0.263803535154934)*x1994);
IkReal x2000=(x1984*x1988);
IkReal x2001=(x1986*x1989);
IkReal x2002=(x1985*x1986);
IkReal x2003=(x1979*x1984);
IkReal x2004=((0.0879345117183112)*x1994);
IkReal x2005=(r20*x1982*x1985);
IkReal x2006=(r20*x1982*x1989);
IkReal x2007=(sj4*x1980*x1989);
IkReal x2008=(sj4*x1980*x1985);
IkReal x2009=(x1990+x1995+x1996+x2005);
IkReal x2010=(x2006+x1997+x1998+x1991);
IkReal x2011=(x2002+x1993+x2004+x2008+x2003);
IkReal x2012=(x2000+x2007+x2001+x1999+x1992);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1)*((x2010+x1978+(((-1.0)*x2012))))))+(((-1.0)*x1978))+(((-1.0)*htj1*x1983))+(((-1.0)*x1983*(htj1*htj1*htj1*htj1*htj1)))+(((-4.51843568638817)*sj0*(htj1*htj1*htj1)))+x2009+(((-1.0)*x2011))+(((htj1*htj1)*((x2010+(((-1.0)*x1978))+(((-1.0)*x2012))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2009+x1978+(((-1.0)*x2011)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2013=cj1*cj1;
IkReal x2014=((3.96189143341844)*pz);
IkReal x2015=((0.000349676537913511)*sj1);
IkReal x2016=(cj5*r20);
IkReal x2017=(r21*sj5);
IkReal x2018=(sj1*sj4);
IkReal x2019=((45.3155348592594)*pz);
IkReal x2020=((11.275775124385)*cj1);
IkReal x2021=(cj4*r22);
IkReal x2022=(cj1*sj1);
IkReal x2023=((1.98964426633813)*sj4);
IkReal x2024=((0.00399954910667823)*sj1);
IkReal x2025=((1.98964426633813)*x2021);
IkReal x2026=(cj1*x2017);
if( IKabs(((12.7972081159903)+((cj1*x2014))+((cj1*x2016*x2023))+(((-1.0)*sj1*x2019))+(((-12.9501946519838)*x2013))+(((11.275775124385)*sj1*x2021))+(((-0.000349676537913511)*cj1*x2016))+(((-1.0)*cj1*x2025))+(((0.630990649736478)*x2022))+(((0.000349676537913511)*x2026))+(((-1.0)*x2017*x2024))+((x2016*x2024))+(((-11.275775124385)*x2016*x2018))+(((-1.0)*x2023*x2026))+(((11.275775124385)*x2017*x2018)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.11884697739709)+((sj1*x2014))+(((-0.00399954910667823)*cj1*x2016))+(((-1.0)*sj4*x2017*x2020))+(((0.00399954910667823)*x2026))+((sj4*x2016*x2020))+((x2015*x2017))+(((-1.98964426633813)*x2017*x2018))+(((-12.9501946519838)*x2022))+(((-1.0)*x2020*x2021))+(((-0.630990649736478)*x2013))+(((1.98964426633813)*x2016*x2018))+(((-1.0)*x2015*x2016))+((cj1*x2019))+(((-1.0)*sj1*x2025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.7972081159903)+((cj1*x2014))+((cj1*x2016*x2023))+(((-1.0)*sj1*x2019))+(((-12.9501946519838)*x2013))+(((11.275775124385)*sj1*x2021))+(((-0.000349676537913511)*cj1*x2016))+(((-1.0)*cj1*x2025))+(((0.630990649736478)*x2022))+(((0.000349676537913511)*x2026))+(((-1.0)*x2017*x2024))+((x2016*x2024))+(((-11.275775124385)*x2016*x2018))+(((-1.0)*x2023*x2026))+(((11.275775124385)*x2017*x2018))))+IKsqr(((-1.11884697739709)+((sj1*x2014))+(((-0.00399954910667823)*cj1*x2016))+(((-1.0)*sj4*x2017*x2020))+(((0.00399954910667823)*x2026))+((sj4*x2016*x2020))+((x2015*x2017))+(((-1.98964426633813)*x2017*x2018))+(((-12.9501946519838)*x2022))+(((-1.0)*x2020*x2021))+(((-0.630990649736478)*x2013))+(((1.98964426633813)*x2016*x2018))+(((-1.0)*x2015*x2016))+((cj1*x2019))+(((-1.0)*sj1*x2025))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((12.7972081159903)+((cj1*x2014))+((cj1*x2016*x2023))+(((-1.0)*sj1*x2019))+(((-12.9501946519838)*x2013))+(((11.275775124385)*sj1*x2021))+(((-0.000349676537913511)*cj1*x2016))+(((-1.0)*cj1*x2025))+(((0.630990649736478)*x2022))+(((0.000349676537913511)*x2026))+(((-1.0)*x2017*x2024))+((x2016*x2024))+(((-11.275775124385)*x2016*x2018))+(((-1.0)*x2023*x2026))+(((11.275775124385)*x2017*x2018))), ((-1.11884697739709)+((sj1*x2014))+(((-0.00399954910667823)*cj1*x2016))+(((-1.0)*sj4*x2017*x2020))+(((0.00399954910667823)*x2026))+((sj4*x2016*x2020))+((x2015*x2017))+(((-1.98964426633813)*x2017*x2018))+(((-12.9501946519838)*x2022))+(((-1.0)*x2020*x2021))+(((-0.630990649736478)*x2013))+(((1.98964426633813)*x2016*x2018))+(((-1.0)*x2015*x2016))+((cj1*x2019))+(((-1.0)*sj1*x2025))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
tj2 = IKtan(j2);
{
IkReal evalcond[9];
IkReal x2027=IKsin(j2);
IkReal x2028=IKcos(j2);
IkReal x2029=((1.0)*cj4);
IkReal x2030=(cj5*sj3);
IkReal x2031=(sj3*sj5);
IkReal x2032=((8.826e-5)*cj5);
IkReal x2033=(cj0*sj1);
IkReal x2034=((0.247882444952069)*sj0);
IkReal x2035=((0.0870967471696526)*cj0);
IkReal x2036=((0.996199857775771)*sj0);
IkReal x2037=((1.0)*sj4);
IkReal x2038=(r11*sj5);
IkReal x2039=(cj5*r20);
IkReal x2040=((8.826e-5)*sj5);
IkReal x2041=((0.0870967471696526)*sj0);
IkReal x2042=(cj3*cj5);
IkReal x2043=(sj0*sj1);
IkReal x2044=((0.28240223039926)*cj1);
IkReal x2045=(cj5*sj4);
IkReal x2046=(cj1*x2028);
IkReal x2047=(cj1*x2027);
IkReal x2048=((0.0437395992633951)*x2028);
IkReal x2049=(sj1*x2027);
IkReal x2050=(cj3*cj4*sj5);
IkReal x2051=(sj1*x2028);
IkReal x2052=((0.996199857775771)*x2046);
evalcond[0]=((((-0.0870967471696526)*x2049))+(((-1.0)*r21*sj5*x2037))+(((0.0870967471696526)*x2046))+((sj4*x2039))+(((-1.0)*r22*x2029))+(((-0.996199857775771)*x2051))+(((-0.996199857775771)*x2047)));
evalcond[1]=((((-0.0437395992633951)*x2049))+((r20*x2032))+(((0.28240223039926)*sj1))+(((-0.247882444952069)*x2047))+(((0.0437395992633951)*x2046))+(((0.03861452)*cj1))+(((-1.0)*r21*x2040))+(((-0.247882444952069)*x2051))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*r01*sj5*x2037))+((r00*x2045))+((x2035*x2047))+(((-0.996199857775771)*x2027*x2033))+(((0.0870967471696526)*x2028*x2033))+((cj0*x2052))+(((-1.0)*r02*x2029)));
evalcond[3]=(((r10*x2045))+((x2036*x2046))+((x2041*x2051))+(((-1.0)*r12*x2029))+(((-1.0)*x2036*x2049))+((x2041*x2047))+(((-1.0)*x2037*x2038)));
evalcond[4]=(((x2033*x2048))+(((0.247882444952069)*cj0*x2046))+(((-0.247882444952069)*x2027*x2033))+(((-1.0)*cj0*x2044))+(((-1.0)*px))+(((0.03861452)*x2033))+((r00*x2032))+(((-1.0)*r01*x2040))+(((0.0437395992633951)*cj0*x2047)));
evalcond[5]=(((x2034*x2046))+(((-1.0)*sj0*x2044))+((x2043*x2048))+(((0.0437395992633951)*sj0*x2047))+(((-8.826e-5)*x2038))+(((-1.0)*py))+((r10*x2032))+(((0.03861452)*x2043))+(((-1.0)*x2034*x2049)));
evalcond[6]=((((0.996199857775771)*x2049))+((r21*x2050))+(((-0.0870967471696526)*x2051))+(((-1.0)*cj3*r22*x2037))+((r21*x2030))+(((-1.0)*cj3*x2029*x2039))+(((-0.0870967471696526)*x2047))+(((-1.0)*x2052))+((r20*x2031)));
evalcond[7]=((((-0.996199857775771)*x2028*x2033))+((r00*x2031))+(((-0.0870967471696526)*x2027*x2033))+(((-1.0)*cj3*r02*x2037))+((x2035*x2046))+((r01*x2050))+((r01*x2030))+(((-0.996199857775771)*cj0*x2047))+(((-1.0)*r00*x2029*x2042)));
evalcond[8]=(((r10*x2031))+(((-1.0)*x2036*x2047))+(((-1.0)*x2036*x2051))+(((-1.0)*x2041*x2049))+((cj3*cj4*x2038))+((x2041*x2046))+(((-1.0)*cj3*r12*x2037))+((r11*x2030))+(((-1.0)*r10*x2029*x2042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - piper (f9bd17528f87f82fbcea2f3f38b1708c)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004c"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
